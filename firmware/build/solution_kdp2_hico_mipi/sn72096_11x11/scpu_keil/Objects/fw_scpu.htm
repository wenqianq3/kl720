<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\fw_scpu.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\fw_scpu.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Mar 28 14:35:18 2023
<BR><P>
<H3>Maximum Stack Usage =       2148 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; dev_initialize &rArr; kdev_flash_initialize &rArr; kdev_flash_read_status &rArr; kdev_flash_read_SFDP &rArr; kdrv_spif_check_status_till_ready &rArr; kdrv_spif_set_commands
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[40]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">NMI_Handler</a><BR>
 <LI><a href="#[41]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">HardFault_Handler</a><BR>
 <LI><a href="#[42]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">MemManage_Handler</a><BR>
 <LI><a href="#[43]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">BusFault_Handler</a><BR>
 <LI><a href="#[44]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">UsageFault_Handler</a><BR>
 <LI><a href="#[46]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">DebugMon_Handler</a><BR>
 <LI><a href="#[4d]">HW_TIMER3_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">HW_TIMER3_IRQ_Handler</a><BR>
 <LI><a href="#[4e]">PWM0_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">PWM0_IRQ_Handler</a><BR>
 <LI><a href="#[4f]">PWM1_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">PWM1_IRQ_Handler</a><BR>
 <LI><a href="#[50]">PWM2_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">PWM2_IRQ_Handler</a><BR>
 <LI><a href="#[51]">WDT_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">WDT_IRQ_Handler</a><BR>
 <LI><a href="#[52]">SWI0_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">SWI0_IRQ_Handler</a><BR>
 <LI><a href="#[53]">TDC_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">TDC_IRQ_Handler</a><BR>
 <LI><a href="#[55]">DMA020_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">DMA020_IRQ_Handler</a><BR>
 <LI><a href="#[56]">DMA020_TC_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">DMA020_TC_IRQ_Handler</a><BR>
 <LI><a href="#[57]">DMA020_ERR_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">DMA020_ERR_IRQ_Handler</a><BR>
 <LI><a href="#[5b]">UART0_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b]">UART0_IRQ_Handler</a><BR>
 <LI><a href="#[5c]">UART1_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">UART1_IRQ_Handler</a><BR>
 <LI><a href="#[5d]">SSP0_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5d]">SSP0_IRQ_Handler</a><BR>
 <LI><a href="#[5e]">SSP1_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">SSP1_IRQ_Handler</a><BR>
 <LI><a href="#[5f]">SPIF_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">SPIF_IRQ_Handler</a><BR>
 <LI><a href="#[60]">SWI1_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">SWI1_IRQ_Handler</a><BR>
 <LI><a href="#[61]">SWI2_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">SWI2_IRQ_Handler</a><BR>
 <LI><a href="#[62]">SWI3_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">SWI3_IRQ_Handler</a><BR>
 <LI><a href="#[63]">DMA030_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[63]">DMA030_IRQ_Handler</a><BR>
 <LI><a href="#[64]">DMA030_TC_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">DMA030_TC_IRQ_Handler</a><BR>
 <LI><a href="#[65]">DMA030_ERR_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[65]">DMA030_ERR_IRQ_Handler</a><BR>
 <LI><a href="#[66]">CSI_RX0_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66]">CSI_RX0_IRQ_Handler</a><BR>
 <LI><a href="#[68]">CSI_RX1_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">CSI_RX1_IRQ_Handler</a><BR>
 <LI><a href="#[6a]">SGI_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">SGI_IRQ_Handler</a><BR>
 <LI><a href="#[6b]">SWI4_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6b]">SWI4_IRQ_Handler</a><BR>
 <LI><a href="#[6c]">SWI5_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">SWI5_IRQ_Handler</a><BR>
 <LI><a href="#[6d]">SWI6_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">SWI6_IRQ_Handler</a><BR>
 <LI><a href="#[6e]">SWI7_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">SWI7_IRQ_Handler</a><BR>
 <LI><a href="#[6f]">SWI8_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">SWI8_IRQ_Handler</a><BR>
 <LI><a href="#[70]">SWI9_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">SWI9_IRQ_Handler</a><BR>
 <LI><a href="#[71]">SWI10_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">SWI10_IRQ_Handler</a><BR>
 <LI><a href="#[72]">DDR_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">DDR_IRQ_Handler</a><BR>
 <LI><a href="#[73]">AXIIC_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">AXIIC_IRQ_Handler</a><BR>
 <LI><a href="#[74]">H2X0_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[74]">H2X0_IRQ_Handler</a><BR>
 <LI><a href="#[75]">H2X1_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">H2X1_IRQ_Handler</a><BR>
 <LI><a href="#[76]">H2X2_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">H2X2_IRQ_Handler</a><BR>
 <LI><a href="#[77]">USB2_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[77]">USB2_IRQ_Handler</a><BR>
 <LI><a href="#[78]">USB3_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">USB3_IRQ_Handler</a><BR>
 <LI><a href="#[79]">SDC0_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[79]">SDC0_IRQ_Handler</a><BR>
 <LI><a href="#[7a]">SDC1_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">SDC1_IRQ_Handler</a><BR>
 <LI><a href="#[7b]">LCDC_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b]">LCDC_IRQ_Handler</a><BR>
 <LI><a href="#[7c]">LCDC_MERR_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7c]">LCDC_MERR_IRQ_Handler</a><BR>
 <LI><a href="#[7d]">LCDC_FIFO_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">LCDC_FIFO_IRQ_Handler</a><BR>
 <LI><a href="#[7e]">LCDC_BAUPD_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7e]">LCDC_BAUPD_IRQ_Handler</a><BR>
 <LI><a href="#[7f]">LCDC_VSTATUS_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7f]">LCDC_VSTATUS_IRQ_Handler</a><BR>
 <LI><a href="#[80]">CRYPTO_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[80]">CRYPTO_IRQ_Handler</a><BR>
 <LI><a href="#[81]">NPU0_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">NPU0_IRQ_Handler</a><BR>
 <LI><a href="#[82]">NPU1_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[82]">NPU1_IRQ_Handler</a><BR>
 <LI><a href="#[83]">NPU2_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[83]">NPU2_IRQ_Handler</a><BR>
 <LI><a href="#[84]">NPU3_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[84]">NPU3_IRQ_Handler</a><BR>
 <LI><a href="#[85]">NPU4_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[85]">NPU4_IRQ_Handler</a><BR>
 <LI><a href="#[86]">NPU5_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[86]">NPU5_IRQ_Handler</a><BR>
 <LI><a href="#[87]">NPU6_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[87]">NPU6_IRQ_Handler</a><BR>
 <LI><a href="#[88]">NPU7_IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[88]">NPU7_IRQ_Handler</a><BR>
 <LI><a href="#[b1]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b1]">osRtxIdleThread</a><BR>
 <LI><a href="#[cb]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cb]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[73]">AXIIC_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[43]">BusFault_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[80]">CRYPTO_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[66]">CSI_RX0_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[68]">CSI_RX1_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[67]">D2A0_IRQ_Handler</a> from kdrv_dpi2ahb.o(i.D2A0_IRQ_Handler) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[69]">D2A1_IRQ_Handler</a> from kdrv_dpi2ahb.o(i.D2A1_IRQ_Handler) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[72]">DDR_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[57]">DMA020_ERR_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[55]">DMA020_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[56]">DMA020_TC_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[65]">DMA030_ERR_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[63]">DMA030_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[64]">DMA030_TC_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[46]">DebugMon_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[54]">GPIO_IRQ_Handler</a> from kdrv_gpio.o(i.GPIO_IRQ_Handler) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[74]">H2X0_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[75]">H2X1_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[76]">H2X2_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[4a]">HW_TIMER0_IRQ_Handler</a> from kdrv_timer.o(i.HW_TIMER0_IRQ_Handler) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[4b]">HW_TIMER1_IRQ_Handler</a> from kdrv_timer.o(i.HW_TIMER1_IRQ_Handler) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[4c]">HW_TIMER2_IRQ_Handler</a> from kdrv_timer.o(i.HW_TIMER2_IRQ_Handler) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[4d]">HW_TIMER3_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[41]">HardFault_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[58]">I2C0_IRQ_Handler</a> from kdrv_i2c.o(i.I2C0_IRQ_Handler) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[59]">I2C1_IRQ_Handler</a> from kdrv_i2c.o(i.I2C1_IRQ_Handler) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[5a]">I2C2_IRQ_Handler</a> from kdrv_i2c.o(i.I2C2_IRQ_Handler) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[7e]">LCDC_BAUPD_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[7d]">LCDC_FIFO_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[7b]">LCDC_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[7c]">LCDC_MERR_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[7f]">LCDC_VSTATUS_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[42]">MemManage_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[9d]">NCPU_IRQHandler</a> from kmdw_ipc.o(i.NCPU_IRQHandler) referenced from kmdw_ipc.o(i.kmdw_ipc_initialize)
 <LI><a href="#[40]">NMI_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[81]">NPU0_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[82]">NPU1_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[83]">NPU2_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[84]">NPU3_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[85]">NPU4_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[86]">NPU5_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[87]">NPU6_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[88]">NPU7_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[4e]">PWM0_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[4f]">PWM1_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[50]">PWM2_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[47]">PendSV_Handler</a> from irq_cm4f.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[3f]">Reset_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[79]">SDC0_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[7a]">SDC1_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[6a]">SGI_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[5f]">SPIF_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[5d]">SSP0_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[5e]">SSP1_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[45]">SVC_Handler</a> from irq_cm4f.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[52]">SWI0_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[71]">SWI10_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[60]">SWI1_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[61]">SWI2_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[62]">SWI3_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[6b]">SWI4_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[6c]">SWI5_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[6d]">SWI6_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[6e]">SWI7_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[6f]">SWI8_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[70]">SWI9_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[49]">SYS_IRQ_Handler</a> from kdrv_system.o(i.SYS_IRQ_Handler) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[8a]">StartupInit</a> from startup.o(i.StartupInit) referenced from startup_asm.o(.text)
 <LI><a href="#[48]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[48]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[53]">TDC_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[5b]">UART0_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[34]">UART0_ISR</a> from kdrv_uart.o(i.UART0_ISR) referenced 2 times from kdrv_uart.o(.data)
 <LI><a href="#[5c]">UART1_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[35]">UART1_ISR</a> from kdrv_uart.o(i.UART1_ISR) referenced 2 times from kdrv_uart.o(.data)
 <LI><a href="#[77]">USB2_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[78]">USB3_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[44]">UsageFault_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[51]">WDT_IRQ_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(VECTOR_TABLE)
 <LI><a href="#[8b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_asm.o(.text)
 <LI><a href="#[8f]">_app_func</a> from application_init.o(i._app_func) referenced from application_init.o(i.app_initialize)
 <LI><a href="#[9a]">_default_status_isr_callback</a> from kdrv_usbd3.o(i._default_status_isr_callback) referenced from kdrv_usbd3.o(i.kdrv_usbd3_initialize)
 <LI><a href="#[9b]">_default_usr_cx_isr_callback</a> from kdrv_usbd3.o(i._default_usr_cx_isr_callback) referenced from kdrv_usbd3.o(i.kdrv_usbd3_initialize)
 <LI><a href="#[93]">_flash_read_callback</a> from kdp2_cmd_handler_720.o(i._flash_read_callback) referenced from kdp2_cmd_handler_720.o(i.kdp2_cmd_handler_initialize)
 <LI><a href="#[9e]">_ipc_handler</a> from kmdw_model.o(i._ipc_handler) referenced from kmdw_model.o(i.kmdw_model_init)
 <LI><a href="#[8e]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[8d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[1a]">dfs_fuzzy_execution</a> from dfs_fuzzy.o(i.dfs_fuzzy_execution) referenced 2 times from kmdw_dfs.o(.data)
 <LI><a href="#[19]">dfs_fuzzy_init</a> from dfs_fuzzy.o(i.dfs_fuzzy_init) referenced 2 times from kmdw_dfs.o(.data)
 <LI><a href="#[c7]">dfu_update_deep_sleep</a> from kmdw_dfu.o(i.dfu_update_deep_sleep) referenced from kmdw_dfu.o(.constdata)
 <LI><a href="#[c6]">dfu_update_sleep</a> from kmdw_dfu.o(i.dfu_update_sleep) referenced from kmdw_dfu.o(.constdata)
 <LI><a href="#[38]">errand_thread</a> from kmdw_errandserv.o(i.errand_thread) referenced 2 times from task_handler.o(.data)
 <LI><a href="#[8c]">fputc</a> from kdrv_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[97]">gdma_isr</a> from kdrv_gdma3.o(i.gdma_isr) referenced from kdrv_gdma3.o(i.kdrv_gdma_initialize)
 <LI><a href="#[96]">image_coming_callback</a> from kdp2_hico_mipi.o(i.image_coming_callback) referenced from kdp2_hico_mipi.o(i.kdp2_hico_mipi_usb_cmd_thread)
 <LI><a href="#[1e]">kdev_sensor_enum_fmt</a> from kdev_sensor_gc2145.o(i.kdev_sensor_enum_fmt) referenced 4 times from kdev_sensor_gc2145.o(.data)
 <LI><a href="#[23]">kdev_sensor_get_dev_id</a> from kdev_sensor_gc2145.o(i.kdev_sensor_get_dev_id) referenced 4 times from kdev_sensor_gc2145.o(.data)
 <LI><a href="#[1f]">kdev_sensor_get_fmt</a> from kdev_sensor_gc2145.o(i.kdev_sensor_get_fmt) referenced 4 times from kdev_sensor_gc2145.o(.data)
 <LI><a href="#[22]">kdev_sensor_get_lux</a> from kdev_sensor_gc2145.o(i.kdev_sensor_get_lux) referenced 2 times from kdev_sensor_gc2145.o(.data)
 <LI><a href="#[25]">kdev_sensor_init</a> from kdev_sensor_gc2145.o(i.kdev_sensor_init) referenced 4 times from kdev_sensor_gc2145.o(.data)
 <LI><a href="#[2e]">kdev_sensor_led_switch</a> from kdev_sensor_sc132gs.o(i.kdev_sensor_led_switch) referenced 2 times from kdev_sensor_sc132gs.o(.data)
 <LI><a href="#[1b]">kdev_sensor_power</a> from kdev_sensor_gc2145.o(i.kdev_sensor_power) referenced 4 times from kdev_sensor_gc2145.o(.data)
 <LI><a href="#[1c]">kdev_sensor_reset</a> from kdev_sensor_gc2145.o(i.kdev_sensor_reset) referenced 4 times from kdev_sensor_gc2145.o(.data)
 <LI><a href="#[21]">kdev_sensor_set_aec</a> from kdev_sensor_gc2145.o(i.kdev_sensor_set_aec) referenced 2 times from kdev_sensor_gc2145.o(.data)
 <LI><a href="#[24]">kdev_sensor_set_devaddress</a> from kdev_sensor_gc2145.o(i.kdev_sensor_set_devaddress) referenced 4 times from kdev_sensor_gc2145.o(.data)
 <LI><a href="#[2d]">kdev_sensor_set_exp_time</a> from kdev_sensor_sc132gs.o(i.kdev_sensor_set_exp_time) referenced 2 times from kdev_sensor_sc132gs.o(.data)
 <LI><a href="#[30]">kdev_sensor_set_flip</a> from kdev_sensor_sc132gs.o(i.kdev_sensor_set_flip) referenced 2 times from kdev_sensor_sc132gs.o(.data)
 <LI><a href="#[20]">kdev_sensor_set_fmt</a> from kdev_sensor_gc2145.o(i.kdev_sensor_set_fmt) referenced 4 times from kdev_sensor_gc2145.o(.data)
 <LI><a href="#[2c]">kdev_sensor_set_gain</a> from kdev_sensor_sc132gs.o(i.kdev_sensor_set_gain) referenced 2 times from kdev_sensor_sc132gs.o(.data)
 <LI><a href="#[2f]">kdev_sensor_set_mirror</a> from kdev_sensor_sc132gs.o(i.kdev_sensor_set_mirror) referenced 2 times from kdev_sensor_sc132gs.o(.data)
 <LI><a href="#[1d]">kdev_sensor_stream</a> from kdev_sensor_gc2145.o(i.kdev_sensor_stream) referenced 4 times from kdev_sensor_gc2145.o(.data)
 <LI><a href="#[92]">kdp2_app_yolo_result_callback</a> from kdp2_inf_app_yolo.o(i.kdp2_app_yolo_result_callback) referenced from kdp2_inf_app_yolo.o(i.kdp2_app_yolo_inference)
 <LI><a href="#[3b]">kdp2_fifoq_manager_enqueue_image_thread</a> from kmdw_fifoq_manager.o(i.kdp2_fifoq_manager_enqueue_image_thread) referenced 2 times from task_handler.o(.data)
 <LI><a href="#[3c]">kdp2_hico_mipi_usb_cmd_thread</a> from kdp2_hico_mipi.o(i.kdp2_hico_mipi_usb_cmd_thread) referenced 2 times from task_handler.o(.data)
 <LI><a href="#[3d]">kdp2_hico_mipi_usb_img_send_back_thread</a> from kdp2_hico_mipi.o(i.kdp2_hico_mipi_usb_img_send_back_thread) referenced 2 times from task_handler.o(.data)
 <LI><a href="#[3e]">kdp2_hico_mipi_usb_result_thread</a> from kdp2_hico_mipi.o(i.kdp2_hico_mipi_usb_result_thread) referenced 2 times from task_handler.o(.data)
 <LI><a href="#[c3]">kdp_memxfer_ddr_to_flash</a> from kmdw_memxfer.o(i.kdp_memxfer_ddr_to_flash) referenced from kmdw_memxfer.o(.constdata)
 <LI><a href="#[c4]">kdp_memxfer_flash_sector_erase64k</a> from kmdw_memxfer.o(i.kdp_memxfer_flash_sector_erase64k) referenced from kmdw_memxfer.o(.constdata)
 <LI><a href="#[c2]">kdp_memxfer_flash_to_ddr</a> from kmdw_memxfer.o(i.kdp_memxfer_flash_to_ddr) referenced from kmdw_memxfer.o(.constdata)
 <LI><a href="#[c5]">kdp_memxfer_get_flash_device_id</a> from kmdw_memxfer.o(i.kdp_memxfer_get_flash_device_id) referenced from kmdw_memxfer.o(.constdata)
 <LI><a href="#[c1]">kdp_memxfer_init</a> from kmdw_memxfer.o(i.kdp_memxfer_init) referenced from kmdw_memxfer.o(.constdata)
 <LI><a href="#[98]">kdrv_tdc_isr</a> from kdrv_tdc.o(i.kdrv_tdc_isr) referenced from kdrv_tdc.o(i.kdrv_tdc_initialize)
 <LI><a href="#[8]">kmdw_cam_buffer_capture</a> from kmdw_camera_kl720.o(i.kmdw_cam_buffer_capture) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[4]">kmdw_cam_buffer_init</a> from kmdw_camera_kl720.o(i.kmdw_cam_buffer_init) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[7]">kmdw_cam_buffer_prepare</a> from kmdw_camera_kl720.o(i.kmdw_cam_buffer_prepare) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[1]">kmdw_cam_close</a> from kmdw_camera_kl720.o(i.kmdw_cam_close) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[15]">kmdw_cam_get_device_id</a> from kmdw_camera_kl720.o(i.kmdw_cam_get_device_id) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[13]">kmdw_cam_get_expo</a> from kmdw_camera_kl720.o(i.kmdw_cam_get_expo) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[3]">kmdw_cam_get_format</a> from kmdw_camera_kl720.o(i.kmdw_cam_get_format) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[f]">kmdw_cam_get_lux</a> from kmdw_camera_kl720.o(i.kmdw_cam_get_lux) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[10]">kmdw_cam_led_switch</a> from kmdw_camera_kl720.o(i.kmdw_cam_led_switch) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[0]">kmdw_cam_open</a> from kmdw_camera_kl720.o(i.kmdw_cam_open) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[b]">kmdw_cam_query_capability</a> from kmdw_camera_kl720.o(i.kmdw_cam_query_capability) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[d]">kmdw_cam_set_aec</a> from kmdw_camera_kl720.o(i.kmdw_cam_set_aec) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[18]">kmdw_cam_set_cam_port</a> from kmdw_camera_kl720.o(i.kmdw_cam_set_cam_port) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[17]">kmdw_cam_set_clock</a> from kmdw_camera_kl720.o(i.kmdw_cam_set_clock) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[16]">kmdw_cam_set_devaddress</a> from kmdw_camera_kl720.o(i.kmdw_cam_set_devaddress) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[e]">kmdw_cam_set_exp_time</a> from kmdw_camera_kl720.o(i.kmdw_cam_set_exp_time) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[12]">kmdw_cam_set_flip</a> from kmdw_camera_kl720.o(i.kmdw_cam_set_flip) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[2]">kmdw_cam_set_format</a> from kmdw_camera_kl720.o(i.kmdw_cam_set_format) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[c]">kmdw_cam_set_gain</a> from kmdw_camera_kl720.o(i.kmdw_cam_set_gain) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[14]">kmdw_cam_set_inc</a> from kmdw_camera_kl720.o(i.kmdw_cam_set_inc) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[11]">kmdw_cam_set_mirror</a> from kmdw_camera_kl720.o(i.kmdw_cam_set_mirror) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[5]">kmdw_cam_start_capture</a> from kmdw_camera_kl720.o(i.kmdw_cam_start_capture) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[6]">kmdw_cam_stop_capture</a> from kmdw_camera_kl720.o(i.kmdw_cam_stop_capture) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[a]">kmdw_cam_stream_off</a> from kmdw_camera_kl720.o(i.kmdw_cam_stream_off) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[9]">kmdw_cam_stream_on</a> from kmdw_camera_kl720.o(i.kmdw_cam_stream_on) referenced 2 times from kmdw_camera_kl720.o(.data)
 <LI><a href="#[9c]">kmdw_dfs_tdc_callback</a> from kmdw_dfs.o(i.kmdw_dfs_tdc_callback) referenced from kmdw_dfs.o(i.kmdw_dfs_initialize)
 <LI><a href="#[39]">kmdw_inference_image_dispatcher_thread</a> from kmdw_inference_720.o(i.kmdw_inference_image_dispatcher_thread) referenced 2 times from task_handler.o(.data)
 <LI><a href="#[3a]">kmdw_inference_result_handler_callback_thread</a> from kmdw_inference_720.o(i.kmdw_inference_result_handler_callback_thread) referenced 2 times from task_handler.o(.data)
 <LI><a href="#[37]">kmdw_tdc_monitor_thread</a> from kmdw_tdc.o(i.kmdw_tdc_monitor_thread) referenced 2 times from task_handler.o(.data)
 <LI><a href="#[36]">logger_thread</a> from kmdw_console.o(i.logger_thread) referenced 2 times from task_handler.o(.data)
 <LI><a href="#[89]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[bd]">osRtxEventFlagsPostProcess</a> from rtx_evflags.o(i.osRtxEventFlagsPostProcess) referenced from rtx_evflags.o(i.svcRtxEventFlagsNew)
 <LI><a href="#[b1]">osRtxIdleThread</a> from rtx_config.o(i.osRtxIdleThread) referenced from rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[be]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(i.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(i.svcRtxMessageQueueNew)
 <LI><a href="#[c0]">osRtxThreadPostProcess</a> from rtx_thread.o(i.osRtxThreadPostProcess) referenced from rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[b2]">osRtxTimerThread</a> from rtx_timer.o(i.osRtxTimerThread) referenced from rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[b3]">osRtxTimerTick</a> from rtx_timer.o(i.osRtxTimerTick) referenced from rtx_timer.o(i.osRtxTimerThread)
 <LI><a href="#[bf]">osThreadExit</a> from rtx_thread.o(i.osThreadExit) referenced from rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[91]">set_sel</a> from kdrv_usbd3.o(i.set_sel) referenced from kdrv_usbd3.o(i.handle_standard_request)
 <LI><a href="#[9f]">svcRtxDelay</a> from rtx_delay.o(i.svcRtxDelay) referenced from rtx_delay.o(i.osDelay)
 <LI><a href="#[a0]">svcRtxEventFlagsClear</a> from rtx_evflags.o(i.svcRtxEventFlagsClear) referenced from rtx_evflags.o(i.osEventFlagsClear)
 <LI><a href="#[a1]">svcRtxEventFlagsNew</a> from rtx_evflags.o(i.svcRtxEventFlagsNew) referenced from rtx_evflags.o(i.osEventFlagsNew)
 <LI><a href="#[a2]">svcRtxEventFlagsSet</a> from rtx_evflags.o(i.svcRtxEventFlagsSet) referenced from rtx_evflags.o(i.osEventFlagsSet)
 <LI><a href="#[a3]">svcRtxEventFlagsWait</a> from rtx_evflags.o(i.svcRtxEventFlagsWait) referenced from rtx_evflags.o(i.osEventFlagsWait)
 <LI><a href="#[a4]">svcRtxKernelGetState</a> from rtx_kernel.o(i.svcRtxKernelGetState) referenced from rtx_kernel.o(i.osKernelGetState)
 <LI><a href="#[a5]">svcRtxKernelGetSysTimerCount</a> from rtx_kernel.o(i.svcRtxKernelGetSysTimerCount) referenced from rtx_kernel.o(i.osKernelGetSysTimerCount)
 <LI><a href="#[a6]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(i.svcRtxKernelGetTickCount) referenced from rtx_kernel.o(i.osKernelGetTickCount)
 <LI><a href="#[a7]">svcRtxKernelGetTickFreq</a> from rtx_kernel.o(i.svcRtxKernelGetTickFreq) referenced from rtx_kernel.o(i.osKernelGetTickFreq)
 <LI><a href="#[a8]">svcRtxKernelInitialize</a> from rtx_kernel.o(i.svcRtxKernelInitialize) referenced from rtx_kernel.o(i.osKernelInitialize)
 <LI><a href="#[a9]">svcRtxKernelStart</a> from rtx_kernel.o(i.svcRtxKernelStart) referenced from rtx_kernel.o(i.osKernelStart)
 <LI><a href="#[aa]">svcRtxMessageQueueDelete</a> from rtx_msgqueue.o(i.svcRtxMessageQueueDelete) referenced from rtx_msgqueue.o(i.osMessageQueueDelete)
 <LI><a href="#[ab]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(i.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(i.osMessageQueueGet)
 <LI><a href="#[ac]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(i.svcRtxMessageQueueNew) referenced from rtx_msgqueue.o(i.osMessageQueueNew)
 <LI><a href="#[ad]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(i.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(i.osMessageQueuePut)
 <LI><a href="#[ae]">svcRtxMutexAcquire</a> from rtx_mutex.o(i.svcRtxMutexAcquire) referenced from rtx_mutex.o(i.osMutexAcquire)
 <LI><a href="#[af]">svcRtxMutexNew</a> from rtx_mutex.o(i.svcRtxMutexNew) referenced from rtx_mutex.o(i.osMutexNew)
 <LI><a href="#[b0]">svcRtxMutexRelease</a> from rtx_mutex.o(i.svcRtxMutexRelease) referenced from rtx_mutex.o(i.osMutexRelease)
 <LI><a href="#[b4]">svcRtxThreadExit</a> from rtx_thread.o(i.svcRtxThreadExit) referenced from rtx_thread.o(i.osThreadExit)
 <LI><a href="#[b5]">svcRtxThreadFlagsClear</a> from rtx_thread.o(i.svcRtxThreadFlagsClear) referenced from rtx_thread.o(i.osThreadFlagsClear)
 <LI><a href="#[b6]">svcRtxThreadFlagsSet</a> from rtx_thread.o(i.svcRtxThreadFlagsSet) referenced from rtx_thread.o(i.osThreadFlagsSet)
 <LI><a href="#[b7]">svcRtxThreadFlagsWait</a> from rtx_thread.o(i.svcRtxThreadFlagsWait) referenced from rtx_thread.o(i.osThreadFlagsWait)
 <LI><a href="#[b8]">svcRtxThreadGetId</a> from rtx_thread.o(i.svcRtxThreadGetId) referenced from rtx_thread.o(i.osThreadGetId)
 <LI><a href="#[b9]">svcRtxThreadNew</a> from rtx_thread.o(i.svcRtxThreadNew) referenced from rtx_thread.o(i.osThreadNew)
 <LI><a href="#[ba]">svcRtxTimerDelete</a> from rtx_timer.o(i.svcRtxTimerDelete) referenced from rtx_timer.o(i.osTimerDelete)
 <LI><a href="#[bb]">svcRtxTimerNew</a> from rtx_timer.o(i.svcRtxTimerNew) referenced from rtx_timer.o(i.osTimerNew)
 <LI><a href="#[bc]">svcRtxTimerStart</a> from rtx_timer.o(i.svcRtxTimerStart) referenced from rtx_timer.o(i.osTimerStart)
 <LI><a href="#[90]">timer_oneshot_callback</a> from kmdw_errandserv.o(i.timer_oneshot_callback) referenced from kmdw_errandserv.o(i.errand_thread)
 <LI><a href="#[94]">usb_user_control_callback</a> from kdp2_hico_mipi.o(i.usb_user_control_callback) referenced from kdp2_hico_mipi.o(i.kdp2_hico_mipi_init)
 <LI><a href="#[95]">usb_user_link_status_callback</a> from kdp2_hico_mipi.o(i.usb_user_link_status_callback) referenced from kdp2_hico_mipi.o(i.kdp2_hico_mipi_init)
 <LI><a href="#[99]">usbd3_isr</a> from kdrv_usbd3.o(i.usbd3_isr) referenced from kdrv_usbd3.o(i.kdrv_usbd3_initialize)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(.text)
</UL>
<P><STRONG><a name="[2cb]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c8]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e7]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2cc]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2cd]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2ce]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2cf]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[2d0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2d1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[2d2]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[247]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
</UL>

<P><STRONG><a name="[243]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsClear
</UL>

<P><STRONG><a name="[24b]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
</UL>

<P><STRONG><a name="[24c]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
</UL>

<P><STRONG><a name="[2d3]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[2d4]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[2d5]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[2d6]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[2d7]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[2d8]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[2d9]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[ca]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_link_put
</UL>

<P><STRONG><a name="[2da]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2db]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2dc]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2dd]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2de]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[274]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[2df]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e0]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[278]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[2e1]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e2]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[273]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[cb]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>

<P><STRONG><a name="[25e]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[2e3]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e4]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e5]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e6]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[ec]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>

<P><STRONG><a name="[2e7]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e8]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e9]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[25d]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[2ea]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2eb]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[cc]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put
</UL>

<P><STRONG><a name="[2ec]"></a>__asm___12_rtx_system_c_024f2f18__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[2ed]"></a>__asm___12_rtx_system_c_024f2f18__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[2ee]"></a>__asm___12_rtx_system_c_024f2f18__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[2ef]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f0]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f1]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[284]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[282]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[2f2]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f3]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[281]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[2f4]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[cd]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>

<P><STRONG><a name="[2f5]"></a>__asm___12_rtx_thread_c_add96be5__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a3]"></a>__asm___12_rtx_thread_c_add96be5__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[2c2]"></a>__asm___12_rtx_thread_c_add96be5__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsClear
</UL>

<P><STRONG><a name="[294]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[295]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[2f6]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f7]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f8]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f9]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[2fa]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[2fb]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[2fc]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[ce]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>

<P><STRONG><a name="[45]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[47]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[48]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(i.svcRtxKernelStart)
<LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[3f]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[40]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[41]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[42]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[43]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[44]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[46]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[4d]"></a>HW_TIMER3_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER3_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER3_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[4e]"></a>PWM0_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[4f]"></a>PWM1_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[50]"></a>PWM2_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[51]"></a>WDT_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[52]"></a>SWI0_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[53]"></a>TDC_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDC_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDC_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[55]"></a>DMA020_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA020_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA020_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[56]"></a>DMA020_TC_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA020_TC_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA020_TC_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[57]"></a>DMA020_ERR_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA020_ERR_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA020_ERR_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[5b]"></a>UART0_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[5c]"></a>UART1_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[5d]"></a>SSP0_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[5e]"></a>SSP1_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[5f]"></a>SPIF_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIF_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIF_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[60]"></a>SWI1_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI1_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI1_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[61]"></a>SWI2_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[62]"></a>SWI3_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[63]"></a>DMA030_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA030_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA030_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[64]"></a>DMA030_TC_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA030_TC_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA030_TC_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[65]"></a>DMA030_ERR_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA030_ERR_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA030_ERR_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[66]"></a>CSI_RX0_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_RX0_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_RX0_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[68]"></a>CSI_RX1_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_RX1_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_RX1_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[6a]"></a>SGI_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGI_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGI_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[6b]"></a>SWI4_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI4_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI4_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[6c]"></a>SWI5_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI5_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI5_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[6d]"></a>SWI6_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI6_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI6_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[6e]"></a>SWI7_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI7_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI7_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[6f]"></a>SWI8_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI8_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI8_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[70]"></a>SWI9_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI9_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI9_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[71]"></a>SWI10_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI10_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI10_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[72]"></a>DDR_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDR_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDR_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[73]"></a>AXIIC_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AXIIC_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AXIIC_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[74]"></a>H2X0_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H2X0_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H2X0_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[75]"></a>H2X1_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H2X1_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H2X1_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[76]"></a>H2X2_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H2X2_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H2X2_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[77]"></a>USB2_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB2_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB2_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[78]"></a>USB3_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB3_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB3_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[79]"></a>SDC0_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDC0_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDC0_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[7a]"></a>SDC1_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDC1_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDC1_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[7b]"></a>LCDC_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDC_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDC_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[7c]"></a>LCDC_MERR_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDC_MERR_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDC_MERR_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[7d]"></a>LCDC_FIFO_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDC_FIFO_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDC_FIFO_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[7e]"></a>LCDC_BAUPD_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDC_BAUPD_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDC_BAUPD_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[7f]"></a>LCDC_VSTATUS_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDC_VSTATUS_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDC_VSTATUS_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[80]"></a>CRYPTO_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[81]"></a>NPU0_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU0_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU0_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[82]"></a>NPU1_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU1_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU1_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[83]"></a>NPU2_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU2_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU2_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[84]"></a>NPU3_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU3_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU3_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[85]"></a>NPU4_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU4_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU4_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[86]"></a>NPU5_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU5_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU5_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[87]"></a>NPU6_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU6_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU6_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[88]"></a>NPU7_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU7_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPU7_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[d1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2fd]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_initialize
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_config_post_process_parameters
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_config_img
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_standard_request
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_efuse_get_key
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_efuse_get_iv
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_efuse_get_auth
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_query_capability
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_input_tensor_info
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_model_info
</UL>

<P><STRONG><a name="[2fe]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[301]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_ncpu
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_legend_kdp_command
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_legend_kdp_command
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_inference
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_initialize
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_config_img
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_model_info
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_scan_all_BBM
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference_bypass_pre_proc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[303]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[219]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_thread
</UL>

<P><STRONG><a name="[11c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_ncpu
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_post_flash_verify_4kblock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_small_block
</UL>

<P><STRONG><a name="[d7]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_all_model_info
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_ul2f</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ffltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
</UL>

<P><STRONG><a name="[304]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[305]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[306]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[de]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>

<P><STRONG><a name="[dc]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[da]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c9]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[308]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[309]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>D2A0_IRQ_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kdrv_dpi2ahb.o(i.D2A0_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = D2A0_IRQ_Handler &rArr; kdrv_dpi2ahb_irqhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_dpi2ahb_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[69]"></a>D2A1_IRQ_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kdrv_dpi2ahb.o(i.D2A1_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = D2A1_IRQ_Handler &rArr; kdrv_dpi2ahb_irqhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_dpi2ahb_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[23f]"></a>EvrRtxDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxDelay))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[286]"></a>EvrRtxDelayCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxDelayCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[240]"></a>EvrRtxDelayError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxDelayError))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[2af]"></a>EvrRtxDelayStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxDelayStarted))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[241]"></a>EvrRtxEventFlagsClear</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsClear))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
</UL>

<P><STRONG><a name="[244]"></a>EvrRtxEventFlagsClearDone</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsClearDone))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsClear
</UL>

<P><STRONG><a name="[2b0]"></a>EvrRtxEventFlagsCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsCreated))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
</UL>

<P><STRONG><a name="[242]"></a>EvrRtxEventFlagsError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsError))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsClear
</UL>

<P><STRONG><a name="[245]"></a>EvrRtxEventFlagsNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsNew))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[246]"></a>EvrRtxEventFlagsSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsSet))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<P><STRONG><a name="[249]"></a>EvrRtxEventFlagsSetDone</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsSetDone))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
</UL>

<P><STRONG><a name="[24a]"></a>EvrRtxEventFlagsWait</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsWait))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
</UL>

<P><STRONG><a name="[24d]"></a>EvrRtxEventFlagsWaitCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsWaitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
</UL>

<P><STRONG><a name="[24e]"></a>EvrRtxEventFlagsWaitNotCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsWaitNotCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
</UL>

<P><STRONG><a name="[2b1]"></a>EvrRtxEventFlagsWaitPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsWaitPending))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
</UL>

<P><STRONG><a name="[288]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[258]"></a>EvrRtxKernelError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelError))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[24f]"></a>EvrRtxKernelGetState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
</UL>

<P><STRONG><a name="[253]"></a>EvrRtxKernelGetSysTimerCount</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelGetSysTimerCount))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[254]"></a>EvrRtxKernelGetTickCount</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
</UL>

<P><STRONG><a name="[255]"></a>EvrRtxKernelGetTickFreq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelGetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickFreq
</UL>

<P><STRONG><a name="[257]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[2b3]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[259]"></a>EvrRtxKernelStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[2b7]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelStarted))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[26e]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[275]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryBlockAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[277]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryBlockFree))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[27a]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryBlockInit))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[270]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryFree))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[272]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[28b]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[2ba]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueCreated))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[25a]"></a>EvrRtxMessageQueueDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueDelete))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
</UL>

<P><STRONG><a name="[2b8]"></a>EvrRtxMessageQueueDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
</UL>

<P><STRONG><a name="[25b]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueError))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
</UL>

<P><STRONG><a name="[25c]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueGet))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[2b9]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueGetPending))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[28c]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[264]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueInsertPending))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[27d]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueInserted))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[261]"></a>EvrRtxMessageQueueNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueNew))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[265]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueNotInserted))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[260]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[262]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueuePut))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[2bb]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueuePutPending))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[28d]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[25f]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[266]"></a>EvrRtxMutexAcquire</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[2bd]"></a>EvrRtxMutexAcquirePending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexAcquirePending))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[289]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[280]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[2bf]"></a>EvrRtxMutexCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexCreated))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[267]"></a>EvrRtxMutexError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexError))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[268]"></a>EvrRtxMutexNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[2be]"></a>EvrRtxMutexNotAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexNotAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[269]"></a>EvrRtxMutexRelease</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[27f]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexReleased))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
</UL>

<P><STRONG><a name="[28a]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[299]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[2c6]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadCreated))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[2c1]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[29f]"></a>EvrRtxThreadError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadError))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[29e]"></a>EvrRtxThreadExit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadExit))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[2a0]"></a>EvrRtxThreadFlagsClear</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsClear))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
</UL>

<P><STRONG><a name="[2c3]"></a>EvrRtxThreadFlagsClearDone</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsClearDone))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsClear
</UL>

<P><STRONG><a name="[2a1]"></a>EvrRtxThreadFlagsError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsError))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsClear
</UL>

<P><STRONG><a name="[2a2]"></a>EvrRtxThreadFlagsSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsSet))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[2a4]"></a>EvrRtxThreadFlagsSetDone</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsSetDone))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[2a5]"></a>EvrRtxThreadFlagsWait</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWait))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
</UL>

<P><STRONG><a name="[293]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[2c5]"></a>EvrRtxThreadFlagsWaitNotCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitNotCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[2c4]"></a>EvrRtxThreadFlagsWaitPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitPending))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[287]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[2a6]"></a>EvrRtxThreadGetId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
</UL>

<P><STRONG><a name="[2c0]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadJoined))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[2a8]"></a>EvrRtxThreadNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[28f]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadPreempted))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[291]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadSwitched))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[28e]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadUnblocked))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[29d]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[2c8]"></a>EvrRtxTimerCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerCreated))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[2aa]"></a>EvrRtxTimerDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerDelete))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
</UL>

<P><STRONG><a name="[2c7]"></a>EvrRtxTimerDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
</UL>

<P><STRONG><a name="[2ab]"></a>EvrRtxTimerError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerError))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
</UL>

<P><STRONG><a name="[2ac]"></a>EvrRtxTimerNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerNew))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[2ad]"></a>EvrRtxTimerStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>

<P><STRONG><a name="[2c9]"></a>EvrRtxTimerStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerStarted))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[54]"></a>GPIO_IRQ_Handler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, kdrv_gpio.o(i.GPIO_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[4a]"></a>HW_TIMER0_IRQ_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kdrv_timer.o(i.HW_TIMER0_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HW_TIMER0_IRQ_Handler &rArr; kdrv_timer_irqhandler &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_timer_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[4b]"></a>HW_TIMER1_IRQ_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kdrv_timer.o(i.HW_TIMER1_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HW_TIMER1_IRQ_Handler &rArr; kdrv_timer_irqhandler &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_timer_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[4c]"></a>HW_TIMER2_IRQ_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kdrv_timer.o(i.HW_TIMER2_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HW_TIMER2_IRQ_Handler &rArr; kdrv_timer_irqhandler &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_timer_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[58]"></a>I2C0_IRQ_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kdrv_i2c.o(i.I2C0_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C0_IRQ_Handler &rArr; kdrv_i2c_irqhandler &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[59]"></a>I2C1_IRQ_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kdrv_i2c.o(i.I2C1_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C1_IRQ_Handler &rArr; kdrv_i2c_irqhandler &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[5a]"></a>I2C2_IRQ_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kdrv_i2c.o(i.I2C2_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C2_IRQ_Handler &rArr; kdrv_i2c_irqhandler &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_irqhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[29b]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[2b6]"></a>OS_Tick_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[250]"></a>OS_Tick_GetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetCount))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[2b5]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[252]"></a>OS_Tick_GetInterval</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetInterval))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[251]"></a>OS_Tick_GetOverflow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetOverflow))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[2b4]"></a>OS_Tick_Setup</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[49]"></a>SYS_IRQ_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, kdrv_system.o(i.SYS_IRQ_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(VECTOR_TABLE)
</UL>
<P><STRONG><a name="[8a]"></a>StartupInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup.o(i.StartupInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>UART0_ISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kdrv_uart.o(i.UART0_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART0_ISR &rArr; UART_ISR &rArr; UART_RX_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdrv_uart.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>UART1_ISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kdrv_uart.o(i.UART1_ISR))
<BR>[Address Reference Count : 1]<UL><LI> kdrv_uart.o(.data)
</UL>
<P><STRONG><a name="[f0]"></a>UART_ISR</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, kdrv_uart.o(i.UART_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_ISR &rArr; UART_RX_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_ISR
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_ISR
</UL>

<P><STRONG><a name="[f3]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[30c]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1db]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_usbd3_bulk_send
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_initialize
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_thread
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>

<P><STRONG><a name="[30d]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[30e]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f5]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[30f]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[21d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>

<P><STRONG><a name="[310]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[311]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[f6]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[312]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[313]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[314]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[218]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>

<P><STRONG><a name="[315]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[316]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[317]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1bf]"></a>add_delay</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, kdrv_ddr.o(i.add_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = add_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_ddr_Initialize
</UL>

<P><STRONG><a name="[10a]"></a>app_initialize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, application_init.o(i.app_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = app_initialize &rArr; kdp2_hico_mipi_init &rArr; kmdw_ddr_reserve &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>defuzzify</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fuzzy.o(i.defuzzify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = defuzzify
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_get_crisp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fuzzy_execution
</UL>

<P><STRONG><a name="[10f]"></a>dev_initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_init.o(i.dev_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 2140<LI>Call Chain = dev_initialize &rArr; kdev_flash_initialize &rArr; kdev_flash_read_status &rArr; kdev_flash_read_SFDP &rArr; kdrv_spif_check_status_till_ready &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>dfs_fuzzy_execution</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dfs_fuzzy.o(i.dfs_fuzzy_execution))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dfs_fuzzy_execution &rArr; fuzzify &rArr; fuzzy_output_truncate &rArr; fuzzy_composition_build &rArr; rebuild
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_set_input
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzify
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defuzzify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_dfs.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>dfs_fuzzy_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_fuzzy.o(i.dfs_fuzzy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dfs_fuzzy_init &rArr; fuzzy_rule_setup &rArr; fuzzy_set_init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_dfs.o(.data)
</UL>
<P><STRONG><a name="[121]"></a>drv_initialize</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, driver_init.o(i.drv_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = drv_initialize &rArr; kdrv_uart_console_init &rArr; kdrv_uart_open &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_initialize
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_console_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_timer_perf_measure_start
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_timer_initialize
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_pinmux_initialize
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_initialize
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_gpio_initialize
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_gdma_initialize
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_dpi2ahb_initialize
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_ddr_Initialize
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_csirx_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>dual_fifo2_create</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dual_fifo2.o(i.dual_fifo2_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dual_fifo2_create &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_init
</UL>

<P><STRONG><a name="[131]"></a>dual_fifo2_dequeue_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dual_fifo2.o(i.dual_fifo2_dequeue_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dual_fifo2_dequeue_data &rArr; osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_dequeue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_image_dequeue
</UL>

<P><STRONG><a name="[133]"></a>dual_fifo2_enqueue_data</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, dual_fifo2.o(i.dual_fifo2_enqueue_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dual_fifo2_enqueue_data &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_enqueue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_fifoq_manager_enqueue_image_thread
</UL>

<P><STRONG><a name="[135]"></a>dual_fifo2_get_free_buffer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dual_fifo2.o(i.dual_fifo2_get_free_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dual_fifo2_get_free_buffer &rArr; osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_image_get_free_buffer
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_get_free_buffer
</UL>

<P><STRONG><a name="[136]"></a>dual_fifo2_put_free_buffer</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, dual_fifo2.o(i.dual_fifo2_put_free_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dual_fifo2_put_free_buffer &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_put_free_buffer
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_dequeue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_image_put_free_buffer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_image_get_free_buffer
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_get_free_buffer
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_fifoq_manager_enqueue_image_thread
</UL>

<P><STRONG><a name="[38]"></a>errand_thread</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, kmdw_errandserv.o(i.errand_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = errand_thread &rArr; osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_handler.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>fputc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, kdrv_uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fputc &rArr; kdrv_uart_write &rArr; kdrv_uart_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[130]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ncpu_fw
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oneshot_callback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_block_backup
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_create
</UL>

<P><STRONG><a name="[112]"></a>fuzzify</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fuzzy.o(i.fuzzify))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fuzzify &rArr; fuzzy_output_truncate &rArr; fuzzy_composition_build &rArr; rebuild
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_evaluate_expression
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_truncate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_reset_fuzzy_sets
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_input_reset_fuzzy_sets
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_input_calculate_fuzzy_set_pertinences
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fuzzy_execution
</UL>

<P><STRONG><a name="[152]"></a>fuzzy_add_input</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fuzzy.o(i.fuzzy_add_input))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[154]"></a>fuzzy_add_output</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fuzzy.o(i.fuzzy_add_output))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[15a]"></a>fuzzy_add_rule</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fuzzy.o(i.fuzzy_add_rule))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[14a]"></a>fuzzy_composition_add_point</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fuzzy_composition.o(i.fuzzy_composition_add_point))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_truncate
</UL>

<P><STRONG><a name="[140]"></a>fuzzy_composition_build</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fuzzy_composition.o(i.fuzzy_composition_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fuzzy_composition_build &rArr; rebuild
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rebuild
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_truncate
</UL>

<P><STRONG><a name="[144]"></a>fuzzy_composition_calculate</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, fuzzy_composition.o(i.fuzzy_composition_calculate))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_get_crisp_output
</UL>

<P><STRONG><a name="[149]"></a>fuzzy_composition_empty</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fuzzy_composition.o(i.fuzzy_composition_empty))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_truncate
</UL>

<P><STRONG><a name="[146]"></a>fuzzy_composition_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fuzzy_composition.o(i.fuzzy_composition_init))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_init
</UL>

<P><STRONG><a name="[14e]"></a>fuzzy_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fuzzy.o(i.fuzzy_init))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[151]"></a>fuzzy_input_add_fuzzy_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fuzzy_io.o(i.fuzzy_input_add_fuzzy_set))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[13d]"></a>fuzzy_input_calculate_fuzzy_set_pertinences</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fuzzy_io.o(i.fuzzy_input_calculate_fuzzy_set_pertinences))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fuzzy_input_calculate_fuzzy_set_pertinences &rArr; fuzzy_set_calculation_pertinence
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_set_calculation_pertinence
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzify
</UL>

<P><STRONG><a name="[150]"></a>fuzzy_input_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fuzzy_io.o(i.fuzzy_input_init))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[13b]"></a>fuzzy_input_reset_fuzzy_sets</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fuzzy_io.o(i.fuzzy_input_reset_fuzzy_sets))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fuzzy_input_reset_fuzzy_sets
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_set_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzify
</UL>

<P><STRONG><a name="[153]"></a>fuzzy_output_add_fuzzy_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fuzzy_io.o(i.fuzzy_output_add_fuzzy_set))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[10e]"></a>fuzzy_output_get_crisp_output</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fuzzy_io.o(i.fuzzy_output_get_crisp_output))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_composition_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defuzzify
</UL>

<P><STRONG><a name="[145]"></a>fuzzy_output_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fuzzy_io.o(i.fuzzy_output_init))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_composition_init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[13c]"></a>fuzzy_output_reset_fuzzy_sets</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fuzzy_io.o(i.fuzzy_output_reset_fuzzy_sets))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fuzzy_output_reset_fuzzy_sets
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_set_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzify
</UL>

<P><STRONG><a name="[13f]"></a>fuzzy_output_truncate</STRONG> (Thumb, 448 bytes, Stack size 64 bytes, fuzzy_io.o(i.fuzzy_output_truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fuzzy_output_truncate &rArr; fuzzy_composition_build &rArr; rebuild
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_composition_empty
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_composition_build
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_composition_add_point
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_rebuild
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzify
</UL>

<P><STRONG><a name="[14d]"></a>fuzzy_rule_antecedent_evaluate</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, fuzzy_rule_antecedent.o(i.fuzzy_rule_antecedent_evaluate))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_evaluate_expression
</UL>

<P><STRONG><a name="[155]"></a>fuzzy_rule_antecedent_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fuzzy_rule_antecedent.o(i.fuzzy_rule_antecedent_init))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[156]"></a>fuzzy_rule_antecedent_join_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fuzzy_rule_antecedent.o(i.fuzzy_rule_antecedent_join_and))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[158]"></a>fuzzy_rule_consequent_add_output</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fuzzy_rule_consequent.o(i.fuzzy_rule_consequent_add_output))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[14b]"></a>fuzzy_rule_consequent_evaluate</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fuzzy_rule_consequent.o(i.fuzzy_rule_consequent_evaluate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fuzzy_rule_consequent_evaluate
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_set_set_pertinence
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_evaluate_expression
</UL>

<P><STRONG><a name="[157]"></a>fuzzy_rule_consequent_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fuzzy_rule_consequent.o(i.fuzzy_rule_consequent_init))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[13e]"></a>fuzzy_rule_evaluate_expression</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fuzzy_rule.o(i.fuzzy_rule_evaluate_expression))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fuzzy_rule_evaluate_expression &rArr; fuzzy_rule_consequent_evaluate
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_consequent_evaluate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_antecedent_evaluate
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzify
</UL>

<P><STRONG><a name="[159]"></a>fuzzy_rule_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fuzzy_rule.o(i.fuzzy_rule_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fuzzy_rule_init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[142]"></a>fuzzy_set_calculation_pertinence</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, fuzzy_set.o(i.fuzzy_set_calculation_pertinence))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fuzzy_set_calculation_pertinence
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_input_calculate_fuzzy_set_pertinences
</UL>

<P><STRONG><a name="[14f]"></a>fuzzy_set_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fuzzy_set.o(i.fuzzy_set_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fuzzy_set_init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_setup
</UL>

<P><STRONG><a name="[111]"></a>fuzzy_set_input</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fuzzy.o(i.fuzzy_set_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fuzzy_set_input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fuzzy_execution
</UL>

<P><STRONG><a name="[143]"></a>fuzzy_set_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fuzzy_set.o(i.fuzzy_set_reset))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_reset_fuzzy_sets
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_input_reset_fuzzy_sets
</UL>

<P><STRONG><a name="[14c]"></a>fuzzy_set_set_pertinence</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fuzzy_set.o(i.fuzzy_set_set_pertinence))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_consequent_evaluate
</UL>

<P><STRONG><a name="[216]"></a>hook_ncpu_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kmdw_ipc.o(i.hook_ncpu_start))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_trigger_int
</UL>

<P><STRONG><a name="[ee]"></a>hook_ncpu_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kmdw_ipc.o(i.hook_ncpu_stop))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCPU_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>image_coming_callback</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, kdp2_hico_mipi.o(i.image_coming_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = image_coming_callback &rArr; kmdw_fifoq_manager_image_get_free_buffer &rArr; dual_fifo2_put_free_buffer &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_image_get_free_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdp2_hico_mipi.o(i.kdp2_hico_mipi_usb_cmd_thread)
</UL>
<P><STRONG><a name="[22d]"></a>kdev_cam_sensor_get_drv_ops</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kdev_sensor.o(i.kdev_cam_sensor_get_drv_ops))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_register
</UL>

<P><STRONG><a name="[163]"></a>kdev_cam_sensor_register</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kdev_sensor.o(i.kdev_cam_sensor_register))
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_cam_sensor_register_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_register
</UL>

<P><STRONG><a name="[165]"></a>kdev_cam_sensor_register_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kdev_sensor_gc2145.o(i.kdev_cam_sensor_register_0), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_cam_sensor_set_drv_ops
</UL>

<P><STRONG><a name="[164]"></a>kdev_cam_sensor_register_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kdev_sensor_sc132gs.o(i.kdev_cam_sensor_register_1))
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_cam_sensor_set_drv_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_cam_sensor_register
</UL>

<P><STRONG><a name="[166]"></a>kdev_cam_sensor_set_drv_ops</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kdev_sensor.o(i.kdev_cam_sensor_set_drv_ops))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_cam_sensor_register_1
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_cam_sensor_register_0
</UL>

<P><STRONG><a name="[167]"></a>kdev_flash_128kErase</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_128kErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = kdev_flash_128kErase &rArr; kdev_flash_read_BBM &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_wait_command_complete
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_check_status_till_ready
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_BBM
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_erase_sector
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_block_backup
</UL>

<P><STRONG><a name="[16c]"></a>kdev_flash_block_backup</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_block_backup))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = kdev_flash_block_backup &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_BBM
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_pagecopy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_128kErase
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata_memxfer
</UL>

<P><STRONG><a name="[16e]"></a>kdev_flash_check_cumulativeECCstauts</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_check_cumulativeECCstauts))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_get_flash_status
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata_memxfer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_running_error_handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_BBM
</UL>

<P><STRONG><a name="[115]"></a>kdev_flash_erase_sector</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = kdev_flash_erase_sector &rArr; kdev_flash_128kErase &rArr; kdev_flash_read_BBM &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_128kErase
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_small_block
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_4k_blocks
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init_partition_boot_cfg
</UL>

<P><STRONG><a name="[116]"></a>kdev_flash_get_status</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kdev_flash_get_status &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_wait_command_complete
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_ncpu
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_get_active_scpu_partition
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_get_active_ncpu_partition
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_cfg_sts_check
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_post_flash_verify_4kblock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_small_block
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_4k_blocks
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init_partition_boot_cfg
</UL>

<P><STRONG><a name="[110]"></a>kdev_flash_initialize</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 2140<LI>Call Chain = kdev_flash_initialize &rArr; kdev_flash_read_status &rArr; kdev_flash_read_SFDP &rArr; kdrv_spif_check_status_till_ready &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_reset_device
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_initialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_scan_all_BBM
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_status
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_flash_id
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_BBM
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_initialize
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp_memxfer_init
</UL>

<P><STRONG><a name="[16d]"></a>kdev_flash_pagecopy</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_pagecopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = kdev_flash_pagecopy &rArr; kdrv_spif_check_status_till_ready &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_wait_command_complete
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_check_status_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_running_error_handler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_block_backup
</UL>

<P><STRONG><a name="[118]"></a>kdev_flash_programdata</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_programdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_write_data_nand
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_switch_org
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_reset_device
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_check_cumulativeECCstauts
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_small_block
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_4k_blocks
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init_partition_boot_cfg
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_scan_all_BBM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_running_error_handler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_block_backup
</UL>

<P><STRONG><a name="[177]"></a>kdev_flash_programdata_memxfer</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_programdata_memxfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = kdev_flash_programdata_memxfer &rArr; kdev_flash_block_backup &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_reset_device
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_check_cumulativeECCstauts
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_block_backup
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp_memxfer_ddr_to_flash
</UL>

<P><STRONG><a name="[168]"></a>kdev_flash_read_BBM</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_read_BBM))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = kdev_flash_read_BBM &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_wait_rx_full
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_wait_command_complete
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_reset_device
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_check_status_till_ready
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_check_cumulativeECCstauts
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_initialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_scan_all_BBM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_running_error_handler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_block_backup
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_128kErase
</UL>

<P><STRONG><a name="[179]"></a>kdev_flash_read_SFDP</STRONG> (Thumb, 186 bytes, Stack size 2080 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_read_SFDP))
<BR><BR>[Stack]<UL><LI>Max Depth = 2092<LI>Call Chain = kdev_flash_read_SFDP &rArr; kdrv_spif_check_status_till_ready &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_wait_rx_full
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_rxfifo_depth
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_check_status_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_status
</UL>

<P><STRONG><a name="[171]"></a>kdev_flash_read_flash_id</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_read_flash_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = kdev_flash_read_flash_id &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_wait_command_complete
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_initialize
</UL>

<P><STRONG><a name="[173]"></a>kdev_flash_read_status</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 2132<LI>Call Chain = kdev_flash_read_status &rArr; kdev_flash_read_SFDP &rArr; kdrv_spif_check_status_till_ready &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_write_data
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_wait_command_complete
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_read_Rx_FIFO
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_SFDP
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_initialize
</UL>

<P><STRONG><a name="[11b]"></a>kdev_flash_readdata</STRONG> (Thumb, 316 bytes, Stack size 64 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_readdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_wait_rx_full
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_rxfifo_depth
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_check_status_till_ready
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_running_error_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_ncpu
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_initialize
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_get_active_scpu_partition
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_get_active_ncpu_partition
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_cfg_sts_check
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_post_flash_verify_4kblock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_small_block
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp_memxfer_flash_to_ddr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_block_backup
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_header_read
</UL>

<P><STRONG><a name="[17e]"></a>kdev_flash_running_error_handler</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_running_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_wait_command_complete
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_reset_device
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_mark_badblock_flag
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_check_status_till_ready
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_BBM
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_pagecopy
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_check_cumulativeECCstauts
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
</UL>

<P><STRONG><a name="[174]"></a>kdev_flash_scan_all_BBM</STRONG> (Thumb, 406 bytes, Stack size 240 bytes, kdev_flash_winbond_nand.o(i.kdev_flash_scan_all_BBM))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = kdev_flash_scan_all_BBM &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_wait_command_complete
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_check_status_till_ready
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_BBM
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_initialize
</UL>

<P><STRONG><a name="[fa]"></a>kdp2_app_yolo_config_post_process_parameters</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, kdp2_inf_app_yolo.o(i.kdp2_app_yolo_config_post_process_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = kdp2_app_yolo_config_post_process_parameters &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_get_free_buffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model_post_proc_param
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_send_status_code
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_enqueue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_func
</UL>

<P><STRONG><a name="[f9]"></a>kdp2_app_yolo_inference</STRONG> (Thumb, 214 bytes, Stack size 416 bytes, kdp2_inf_app_yolo.o(i.kdp2_app_yolo_inference))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = kdp2_app_yolo_inference &rArr; kmdw_inference_app_execute &rArr; kmdw_model_run &rArr; kmdw_ipc_set_model &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_execute
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_get_free_buffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_model_post_proc_param
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_enqueue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_func
</UL>

<P><STRONG><a name="[92]"></a>kdp2_app_yolo_result_callback</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, kdp2_inf_app_yolo.o(i.kdp2_app_yolo_result_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kdp2_app_yolo_result_callback &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdp2_inf_app_yolo.o(i.kdp2_app_yolo_inference)
</UL>
<P><STRONG><a name="[186]"></a>kdp2_cmd_handle_kp_command</STRONG> (Thumb, 1452 bytes, Stack size 560 bytes, kdp2_cmd_handler_720.o(i.kdp2_cmd_handle_kp_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = kdp2_cmd_handle_kp_command &rArr; kmdw_model_load_model &rArr; _load_model_info &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_reload_model_info
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_load_model
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_model_info
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_model_end_addr
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_fw_info
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_get_output
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_get_fifoq_config
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_get_fifoq_allocated
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ddr_get_heap_tail
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_gpio_write_pin
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_efuse_program_sbt_key
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_efuse_program_key
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_send
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_receive
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_efuse_get_kn_number
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ddr_reserve
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
</UL>

<P><STRONG><a name="[193]"></a>kdp2_cmd_handle_legend_kdp_command</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, kdp2_cmd_handler_720.o(i.kdp2_cmd_handle_legend_kdp_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = kdp2_cmd_handle_legend_kdp_command &rArr; kmdw_dfu_update_scpu &rArr; dfu_post_flash_verify_4kblock &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_ncpu
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_model
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_power_sw_reset
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
</UL>

<P><STRONG><a name="[199]"></a>kdp2_cmd_handler_initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, kdp2_cmd_handler_720.o(i.kdp2_cmd_handler_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = kdp2_cmd_handler_initialize &rArr; kmdw_dfu_init &rArr; kmdw_power_manager_register
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_init
</UL>

<P><STRONG><a name="[3b]"></a>kdp2_fifoq_manager_enqueue_image_thread</STRONG> (Thumb, 202 bytes, Stack size 104 bytes, kmdw_fifoq_manager.o(i.kdp2_fifoq_manager_enqueue_image_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = kdp2_fifoq_manager_enqueue_image_thread &rArr; dual_fifo2_put_free_buffer &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_put_free_buffer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_enqueue_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_handler.o(.data)
</UL>
<P><STRONG><a name="[19b]"></a>kdp2_generic_raw_inference</STRONG> (Thumb, 784 bytes, Stack size 440 bytes, kdp2_inf_generic_raw.o(i.kdp2_generic_raw_inference))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = kdp2_generic_raw_inference &rArr; kmdw_inference_app_execute &rArr; kmdw_model_run &rArr; kmdw_ipc_set_model &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_execute
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_get_free_buffer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_enqueue
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_get_model_input_image_size
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_get_model_raw_output_size
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_image_dispatcher_thread
</UL>

<P><STRONG><a name="[19e]"></a>kdp2_generic_raw_inference_bypass_pre_proc</STRONG> (Thumb, 176 bytes, Stack size 400 bytes, kdp2_inf_generic_raw.o(i.kdp2_generic_raw_inference_bypass_pre_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = kdp2_generic_raw_inference_bypass_pre_proc &rArr; kmdw_inference_app_execute &rArr; kmdw_model_run &rArr; kmdw_ipc_set_model &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_execute
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_get_free_buffer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_enqueue
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_get_model_raw_output_size
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_image_dispatcher_thread
</UL>

<P><STRONG><a name="[10c]"></a>kdp2_hico_mipi_init</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, kdp2_hico_mipi.o(i.kdp2_hico_mipi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = kdp2_hico_mipi_init &rArr; kmdw_ddr_reserve &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_set_enable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_initialize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_store_fifoq_config
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_put_free_buffer
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_image_put_free_buffer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_efuse_get_kn_number
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handler_initialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ddr_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_initialize
</UL>

<P><STRONG><a name="[3c]"></a>kdp2_hico_mipi_usb_cmd_thread</STRONG> (Thumb, 532 bytes, Stack size 160 bytes, kdp2_hico_mipi.o(i.kdp2_hico_mipi_usb_cmd_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = kdp2_hico_mipi_usb_cmd_thread &rArr; kdp2_cmd_handle_kp_command &rArr; kmdw_model_load_model &rArr; _load_model_info &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_send
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_receive
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_image_get_free_buffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_camera_start
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_camera_set_frame_format
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_camera_open
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_camera_get_frame_format
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_camera_get_device_info
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_camera_buffer_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_legend_kdp_command
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ddr_reserve
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_handler.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>kdp2_hico_mipi_usb_img_send_back_thread</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, kdp2_hico_mipi.o(i.kdp2_hico_mipi_usb_img_send_back_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = kdp2_hico_mipi_usb_img_send_back_thread &rArr; kmdw_fifoq_manager_image_put_free_buffer &rArr; dual_fifo2_put_free_buffer &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_send
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_image_put_free_buffer
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_image_enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_handler.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>kdp2_hico_mipi_usb_result_thread</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, kdp2_hico_mipi.o(i.kdp2_hico_mipi_usb_result_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = kdp2_hico_mipi_usb_result_thread &rArr; kmdw_fifoq_manager_result_dequeue &rArr; dual_fifo2_put_free_buffer &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_send
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_put_free_buffer
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_dequeue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_handler.o(.data)
</UL>
<P><STRONG><a name="[c3]"></a>kdp_memxfer_ddr_to_flash</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, kmdw_memxfer.o(i.kdp_memxfer_ddr_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = kdp_memxfer_ddr_to_flash &rArr; kdev_flash_programdata_memxfer &rArr; kdev_flash_block_backup &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata_memxfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_memxfer.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>kdp_memxfer_flash_sector_erase64k</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kmdw_memxfer.o(i.kdp_memxfer_flash_sector_erase64k))
<BR>[Address Reference Count : 1]<UL><LI> kmdw_memxfer.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>kdp_memxfer_flash_to_ddr</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, kmdw_memxfer.o(i.kdp_memxfer_flash_to_ddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = kdp_memxfer_flash_to_ddr &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_memxfer.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>kdp_memxfer_get_flash_device_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kmdw_memxfer.o(i.kdp_memxfer_get_flash_device_id))
<BR>[Address Reference Count : 1]<UL><LI> kmdw_memxfer.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>kdp_memxfer_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, kmdw_memxfer.o(i.kdp_memxfer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2140<LI>Call Chain = kdp_memxfer_init &rArr; kdev_flash_initialize &rArr; kdev_flash_read_status &rArr; kdev_flash_read_SFDP &rArr; kdrv_spif_check_status_till_ready &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_memxfer.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>kdrv_aes_cbc_decrypt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, kdrv_aes.o(i.kdrv_aes_cbc_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = kdrv_aes_cbc_decrypt &rArr; kdrv_aes_cbc &rArr; kdrv_aes_build_descr &rArr; kdrv_write_desc_blk &rArr; kdrv_write_desc_always
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_aes_cbc
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_header_read
</UL>

<P><STRONG><a name="[227]"></a>kdrv_aes_initialize</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, kdrv_aes.o(i.kdrv_aes_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
</UL>

<P><STRONG><a name="[1b6]"></a>kdrv_clock_dsp_clock_set</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, kdrv_clock.o(i.kdrv_clock_dsp_clock_set))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_clock_inititialize
</UL>

<P><STRONG><a name="[1b4]"></a>kdrv_clock_inititialize</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, kdrv_clock.o(i.kdrv_clock_inititialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kdrv_clock_inititialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_clock_npu_clock_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_clock_dsp_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_system_initialize
</UL>

<P><STRONG><a name="[1b7]"></a>kdrv_clock_npu_clock_change</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kdrv_clock.o(i.kdrv_clock_npu_clock_change))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_clock_npu_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_set_npu_frequency
</UL>

<P><STRONG><a name="[1b5]"></a>kdrv_clock_npu_clock_set</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, kdrv_clock.o(i.kdrv_clock_npu_clock_set))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_clock_npu_clock_change
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_clock_inititialize
</UL>

<P><STRONG><a name="[1bd]"></a>kdrv_clock_set_csiclk</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, kdrv_clock.o(i.kdrv_clock_set_csiclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kdrv_clock_set_csiclk
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_open
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_close
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_csirx_initialize
</UL>

<P><STRONG><a name="[1cb]"></a>kdrv_crypto_set_desc_invalid_bytes</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, kdrv_crypto.o(i.kdrv_crypto_set_desc_invalid_bytes))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_internal
</UL>

<P><STRONG><a name="[1b0]"></a>kdrv_crypto_set_last_desc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kdrv_crypto.o(i.kdrv_crypto_set_last_desc))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_internal
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_aes_build_descr
</UL>

<P><STRONG><a name="[1b9]"></a>kdrv_cryptodma_check_bus_error</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kdrv_crypto.o(i.kdrv_cryptodma_check_bus_error))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_cryptodma_check_status
</UL>

<P><STRONG><a name="[1b8]"></a>kdrv_cryptodma_check_status</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, kdrv_crypto.o(i.kdrv_cryptodma_check_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = kdrv_cryptodma_check_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_cryptodma_check_bus_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_cryptodma_run_sg
</UL>

<P><STRONG><a name="[1ba]"></a>kdrv_cryptodma_config_sg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kdrv_crypto.o(i.kdrv_cryptodma_config_sg))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_cryptodma_run_sg
</UL>

<P><STRONG><a name="[1b1]"></a>kdrv_cryptodma_run_sg</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, kdrv_crypto.o(i.kdrv_cryptodma_run_sg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kdrv_cryptodma_run_sg &rArr; kdrv_cryptodma_check_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_cryptodma_wait
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_cryptodma_start
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_cryptodma_config_sg
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_cryptodma_check_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_internal
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_aes_build_descr
</UL>

<P><STRONG><a name="[1bb]"></a>kdrv_cryptodma_start</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kdrv_crypto.o(i.kdrv_cryptodma_start))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_cryptodma_run_sg
</UL>

<P><STRONG><a name="[1bc]"></a>kdrv_cryptodma_wait</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kdrv_crypto.o(i.kdrv_cryptodma_wait))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_cryptodma_run_sg
</UL>

<P><STRONG><a name="[12b]"></a>kdrv_csirx_initialize</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, kdrv_mipicsirx.o(i.kdrv_csirx_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kdrv_csirx_initialize &rArr; kdrv_clock_set_csiclk
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_clock_set_csiclk
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_initialize
</UL>

<P><STRONG><a name="[1e4]"></a>kdrv_csirx_set_enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, kdrv_mipicsirx.o(i.kdrv_csirx_set_enable))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_open
</UL>

<P><STRONG><a name="[1be]"></a>kdrv_csirx_set_para</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, kdrv_mipicsirx.o(i.kdrv_csirx_set_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kdrv_csirx_set_para &rArr; kdrv_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_format
</UL>

<P><STRONG><a name="[1ee]"></a>kdrv_csirx_start</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, kdrv_mipicsirx.o(i.kdrv_csirx_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kdrv_csirx_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_start_capture
</UL>

<P><STRONG><a name="[1f1]"></a>kdrv_csirx_stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kdrv_mipicsirx.o(i.kdrv_csirx_stop))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_stop_capture
</UL>

<P><STRONG><a name="[125]"></a>kdrv_ddr_Initialize</STRONG> (Thumb, 1530 bytes, Stack size 20 bytes, kdrv_ddr.o(i.kdrv_ddr_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kdrv_ddr_Initialize &rArr; add_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_initialize
</UL>

<P><STRONG><a name="[117]"></a>kdrv_delay_us</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, kdrv_clock.o(i.kdrv_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = kdrv_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_ncpu
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_get_active_scpu_partition
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_get_active_ncpu_partition
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_cfg_sts_check
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_post_flash_verify_4kblock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_small_block
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_4k_blocks
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init_partition_boot_cfg
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_status
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_timer_perf_set
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_set_attribute
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_csirx_set_para
</UL>

<P><STRONG><a name="[1de]"></a>kdrv_dpi2ahb_buf_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kdrv_dpi2ahb.o(i.kdrv_dpi2ahb_buf_init))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_buffer_init
</UL>

<P><STRONG><a name="[12c]"></a>kdrv_dpi2ahb_initialize</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kdrv_dpi2ahb.o(i.kdrv_dpi2ahb_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_initialize
</UL>

<P><STRONG><a name="[e8]"></a>kdrv_dpi2ahb_irqhandler</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, kdrv_dpi2ahb.o(i.kdrv_dpi2ahb_irqhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = kdrv_dpi2ahb_irqhandler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2A1_IRQ_Handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2A0_IRQ_Handler
</UL>

<P><STRONG><a name="[1ea]"></a>kdrv_dpi2ahb_set_para</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, kdrv_dpi2ahb.o(i.kdrv_dpi2ahb_set_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kdrv_dpi2ahb_set_para
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_format
</UL>

<P><STRONG><a name="[1e3]"></a>kdrv_dpi2ahb_src_config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kdrv_dpi2ahb.o(i.kdrv_dpi2ahb_src_config))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_cam_port
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_open
</UL>

<P><STRONG><a name="[1ef]"></a>kdrv_dpi2ahb_start</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, kdrv_dpi2ahb.o(i.kdrv_dpi2ahb_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kdrv_dpi2ahb_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_start_capture
</UL>

<P><STRONG><a name="[1f2]"></a>kdrv_dpi2ahb_stop</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, kdrv_dpi2ahb.o(i.kdrv_dpi2ahb_stop))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_stop_capture
</UL>

<P><STRONG><a name="[1c0]"></a>kdrv_efuse_get_auth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kdrv_efuse.o(i.kdrv_efuse_get_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kdrv_efuse_get_auth &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
</UL>

<P><STRONG><a name="[22c]"></a>kdrv_efuse_get_enc_boot_flag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kdrv_efuse.o(i.kdrv_efuse_get_enc_boot_flag))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_get_boot_flag
</UL>

<P><STRONG><a name="[1c1]"></a>kdrv_efuse_get_iv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kdrv_efuse.o(i.kdrv_efuse_get_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kdrv_efuse_get_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
</UL>

<P><STRONG><a name="[1c2]"></a>kdrv_efuse_get_key</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kdrv_efuse.o(i.kdrv_efuse_get_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kdrv_efuse_get_key &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
</UL>

<P><STRONG><a name="[18a]"></a>kdrv_efuse_get_kn_number</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, kdrv_efuse.o(i.kdrv_efuse_get_kn_number))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_init
</UL>

<P><STRONG><a name="[1d3]"></a>kdrv_efuse_get_tdc_trim_code</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kdrv_efuse.o(i.kdrv_efuse_get_tdc_trim_code))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_tdc_initialize
</UL>

<P><STRONG><a name="[18d]"></a>kdrv_efuse_program_key</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, kdrv_efuse.o(i.kdrv_efuse_program_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = kdrv_efuse_program_key
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
</UL>

<P><STRONG><a name="[18e]"></a>kdrv_efuse_program_sbt_key</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, kdrv_efuse.o(i.kdrv_efuse_program_sbt_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = kdrv_efuse_program_sbt_key
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
</UL>

<P><STRONG><a name="[126]"></a>kdrv_gdma_initialize</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, kdrv_gdma3.o(i.kdrv_gdma_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = kdrv_gdma_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_initialize
</UL>

<P><STRONG><a name="[128]"></a>kdrv_gpio_initialize</STRONG> (Thumb, 196 bytes, Stack size 12 bytes, kdrv_gpio.o(i.kdrv_gpio_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kdrv_gpio_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_initialize
</UL>

<P><STRONG><a name="[182]"></a>kdrv_gpio_write_pin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, kdrv_gpio.o(i.kdrv_gpio_write_pin))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_init
</UL>

<P><STRONG><a name="[1c3]"></a>kdrv_hash_array_blk</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, kdrv_hash.o(i.kdrv_hash_array_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = kdrv_hash_array_blk &rArr; kdrv_hash_internal &rArr; kdrv_write_desc &rArr; kdrv_write_desc_always
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_blk
</UL>

<P><STRONG><a name="[1c5]"></a>kdrv_hash_blk</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, kdrv_hash.o(i.kdrv_hash_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = kdrv_hash_blk &rArr; kdrv_hash_array_blk &rArr; kdrv_hash_internal &rArr; kdrv_write_desc &rArr; kdrv_write_desc_always
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_array_blk
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
</UL>

<P><STRONG><a name="[1ca]"></a>kdrv_hash_get_block_size</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kdrv_hash.o(i.kdrv_hash_get_block_size))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_internal
</UL>

<P><STRONG><a name="[1c7]"></a>kdrv_hash_get_digest_size</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, kdrv_hash.o(i.kdrv_hash_get_digest_size))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_internal
</UL>

<P><STRONG><a name="[1c6]"></a>kdrv_hash_get_state_size</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, kdrv_hash.o(i.kdrv_hash_get_state_size))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_internal
</UL>

<P><STRONG><a name="[22a]"></a>kdrv_hash_initialize</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kdrv_hash.o(i.kdrv_hash_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
</UL>

<P><STRONG><a name="[127]"></a>kdrv_i2c_initialize</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, kdrv_i2c.o(i.kdrv_i2c_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = kdrv_i2c_initialize &rArr; kdrv_i2c_set_attribute &rArr; kdrv_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_set_attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_initialize
</UL>

<P><STRONG><a name="[ea]"></a>kdrv_i2c_irqhandler</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, kdrv_i2c.o(i.kdrv_i2c_irqhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = kdrv_i2c_irqhandler &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_IRQ_Handler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQ_Handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQ_Handler
</UL>

<P><STRONG><a name="[180]"></a>kdrv_i2c_read_register</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, kdrv_i2c.o(i.kdrv_i2c_read_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = kdrv_i2c_read_register &rArr; i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_set_mirror
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_set_flip
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_get_dev_id
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_get_lux
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_get_dev_id
</UL>

<P><STRONG><a name="[1cc]"></a>kdrv_i2c_set_attribute</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, kdrv_i2c.o(i.kdrv_i2c_set_attribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = kdrv_i2c_set_attribute &rArr; kdrv_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_initialize
</UL>

<P><STRONG><a name="[181]"></a>kdrv_i2c_write_register</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, kdrv_i2c.o(i.kdrv_i2c_write_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = kdrv_i2c_write_register &rArr; i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_set_mirror
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_set_gain
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_set_flip
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_set_exp_time
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_led_switch
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_set_aec
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_sensor_get_lux
</UL>

<P><STRONG><a name="[ef]"></a>kdrv_ipc_clear_from_ncpu_int</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kdrv_ipc.o(i.kdrv_ipc_clear_from_ncpu_int))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCPU_IRQHandler
</UL>

<P><STRONG><a name="[213]"></a>kdrv_ipc_enable_to_ncpu_int</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kdrv_ipc.o(i.kdrv_ipc_enable_to_ncpu_int))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_initialize
</UL>

<P><STRONG><a name="[217]"></a>kdrv_ipc_trigger_to_ncpu_int</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kdrv_ipc.o(i.kdrv_ipc_trigger_to_ncpu_int))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_trigger_int
</UL>

<P><STRONG><a name="[235]"></a>kdrv_mpu_niram_disable</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, kdrv_mpu.o(i.kdrv_mpu_niram_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = kdrv_mpu_niram_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ncpu_fw
</UL>

<P><STRONG><a name="[234]"></a>kdrv_mpu_niram_enable</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, kdrv_mpu.o(i.kdrv_mpu_niram_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = kdrv_mpu_niram_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ncpu_fw
</UL>

<P><STRONG><a name="[232]"></a>kdrv_ncpu_boot_initialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, kdrv_ncpu.o(i.kdrv_ncpu_boot_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ncpu_fw
</UL>

<P><STRONG><a name="[236]"></a>kdrv_ncpu_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kdrv_ncpu.o(i.kdrv_ncpu_reset))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ncpu_fw
</UL>

<P><STRONG><a name="[1f7]"></a>kdrv_ncpu_set_ncpu_debug_lvl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kmdw_ipc.o(i.kdrv_ncpu_set_ncpu_debug_lvl))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_console_set_log_level_ncpu
</UL>

<P><STRONG><a name="[1f9]"></a>kdrv_ncpu_set_scpu_debug_lvl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kmdw_ipc.o(i.kdrv_ncpu_set_scpu_debug_lvl))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_console_set_log_level_scpu
</UL>

<P><STRONG><a name="[233]"></a>kdrv_ncpu_set_stall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kdrv_ncpu.o(i.kdrv_ncpu_set_stall))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ncpu_fw
</UL>

<P><STRONG><a name="[124]"></a>kdrv_pinmux_initialize</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, kdrv_pinmux.o(i.kdrv_pinmux_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kdrv_pinmux_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_initialize
</UL>

<P><STRONG><a name="[1d0]"></a>kdrv_power_ops</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, kdrv_power.o(i.kdrv_power_ops))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_system_initialize
</UL>

<P><STRONG><a name="[1ce]"></a>kdrv_power_set_domain</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, kdrv_power.o(i.kdrv_power_set_domain))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_power_set_powermode
</UL>

<P><STRONG><a name="[1cd]"></a>kdrv_power_set_powermode</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, kdrv_power.o(i.kdrv_power_set_powermode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = kdrv_power_set_powermode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_power_set_domain
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_system_initialize
</UL>

<P><STRONG><a name="[1d1]"></a>kdrv_power_set_wakeup_src</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kdrv_power.o(i.kdrv_power_set_wakeup_src))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_system_initialize
</UL>

<P><STRONG><a name="[197]"></a>kdrv_power_sw_reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, kdrv_power.o(i.kdrv_power_sw_reset))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_legend_kdp_command
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_user_control_callback
</UL>

<P><STRONG><a name="[16b]"></a>kdrv_spif_check_status_till_ready</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, kdrv_spif_nand.o(i.kdrv_spif_check_status_till_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kdrv_spif_check_status_till_ready &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_reset_device
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_mark_badblock_flag
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_scan_all_BBM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_running_error_handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_SFDP
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_BBM
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_pagecopy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_128kErase
</UL>

<P><STRONG><a name="[16f]"></a>kdrv_spif_get_flash_status</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, kdrv_spif_nand.o(i.kdrv_spif_get_flash_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = kdrv_spif_get_flash_status &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_check_cumulativeECCstauts
</UL>

<P><STRONG><a name="[170]"></a>kdrv_spif_initialize</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, kdrv_spif_nand.o(i.kdrv_spif_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_initialize
</UL>

<P><STRONG><a name="[17f]"></a>kdrv_spif_mark_badblock_flag</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, kdrv_spif_nand.o(i.kdrv_spif_mark_badblock_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = kdrv_spif_mark_badblock_flag &rArr; kdrv_spif_check_status_till_ready &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_check_status_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_running_error_handler
</UL>

<P><STRONG><a name="[17c]"></a>kdrv_spif_read_Rx_FIFO</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, kdrv_spif_nand.o(i.kdrv_spif_read_Rx_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = kdrv_spif_read_Rx_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_status
</UL>

<P><STRONG><a name="[17b]"></a>kdrv_spif_read_data</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, kdrv_spif_nand.o(i.kdrv_spif_read_data))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_flash_id
</UL>

<P><STRONG><a name="[172]"></a>kdrv_spif_reset_device</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, kdrv_spif_nand.o(i.kdrv_spif_reset_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = kdrv_spif_reset_device &rArr; kdrv_spif_check_status_till_ready &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_check_status_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_initialize
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata_memxfer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_running_error_handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_BBM
</UL>

<P><STRONG><a name="[17a]"></a>kdrv_spif_rxfifo_depth</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kdrv_spif_nand.o(i.kdrv_spif_rxfifo_depth))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_SFDP
</UL>

<P><STRONG><a name="[169]"></a>kdrv_spif_set_commands</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, kdrv_spif_nand.o(i.kdrv_spif_set_commands))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = kdrv_spif_set_commands
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_get_status
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_write_data_nand
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_reset_device
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_mark_badblock_flag
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_get_flash_status
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_check_status_till_ready
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_scan_all_BBM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_running_error_handler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_status
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_flash_id
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_SFDP
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_BBM
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_pagecopy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_128kErase
</UL>

<P><STRONG><a name="[175]"></a>kdrv_spif_switch_org</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kdrv_spif_nand.o(i.kdrv_spif_switch_org))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata
</UL>

<P><STRONG><a name="[16a]"></a>kdrv_spif_wait_command_complete</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kdrv_spif_nand.o(i.kdrv_spif_wait_command_complete))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_get_status
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_scan_all_BBM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_running_error_handler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_status
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_flash_id
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_BBM
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_pagecopy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_128kErase
</UL>

<P><STRONG><a name="[178]"></a>kdrv_spif_wait_rx_full</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kdrv_spif_nand.o(i.kdrv_spif_wait_rx_full))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_SFDP
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_BBM
</UL>

<P><STRONG><a name="[17d]"></a>kdrv_spif_write_data</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, kdrv_spif_nand.o(i.kdrv_spif_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kdrv_spif_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_status
</UL>

<P><STRONG><a name="[176]"></a>kdrv_spif_write_data_nand</STRONG> (Thumb, 296 bytes, Stack size 36 bytes, kdrv_spif_nand.o(i.kdrv_spif_write_data_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kdrv_spif_write_data_nand &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_spif_set_commands
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata
</UL>

<P><STRONG><a name="[1cf]"></a>kdrv_system_initialize</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, kdrv_system.o(i.kdrv_system_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kdrv_system_initialize &rArr; kdrv_power_set_powermode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_power_set_wakeup_src
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_power_set_powermode
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_power_ops
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_clock_inititialize
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_initialize
</UL>

<P><STRONG><a name="[1ff]"></a>kdrv_tdc_enable</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, kdrv_tdc.o(i.kdrv_tdc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_initialize
</UL>

<P><STRONG><a name="[22f]"></a>kdrv_tdc_get_temp_fixed_point</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kdrv_tdc.o(i.kdrv_tdc_get_temp_fixed_point))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_tdc_monitor_thread
</UL>

<P><STRONG><a name="[1d2]"></a>kdrv_tdc_initialize</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, kdrv_tdc.o(i.kdrv_tdc_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = kdrv_tdc_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_efuse_get_tdc_trim_code
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_initialize
</UL>

<P><STRONG><a name="[201]"></a>kdrv_tdc_int_status_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kdrv_tdc.o(i.kdrv_tdc_int_status_read))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_tdc_callback
</UL>

<P><STRONG><a name="[1fb]"></a>kdrv_tdc_register_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kdrv_tdc.o(i.kdrv_tdc_register_callback))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_initialize
</UL>

<P><STRONG><a name="[1fc]"></a>kdrv_tdc_set_thrd</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, kdrv_tdc.o(i.kdrv_tdc_set_thrd))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_initialize
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_tdc_callback
</UL>

<P><STRONG><a name="[1fd]"></a>kdrv_tdc_set_thrd_enflag</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, kdrv_tdc.o(i.kdrv_tdc_set_thrd_enflag))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_initialize
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_tdc_callback
</UL>

<P><STRONG><a name="[1fe]"></a>kdrv_tdc_set_thrd_int_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, kdrv_tdc.o(i.kdrv_tdc_set_thrd_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_initialize
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_tdc_callback
</UL>

<P><STRONG><a name="[22e]"></a>kdrv_tdc_update</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, kdrv_tdc.o(i.kdrv_tdc_update))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_tdc_monitor_thread
</UL>

<P><STRONG><a name="[129]"></a>kdrv_timer_initialize</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, kdrv_timer.o(i.kdrv_timer_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_timer_perf_measure_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_initialize
</UL>

<P><STRONG><a name="[e9]"></a>kdrv_timer_irqhandler</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, kdrv_timer.o(i.kdrv_timer_irqhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = kdrv_timer_irqhandler &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER2_IRQ_Handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER1_IRQ_Handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIMER0_IRQ_Handler
</UL>

<P><STRONG><a name="[12a]"></a>kdrv_timer_perf_measure_start</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, kdrv_timer.o(i.kdrv_timer_perf_measure_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = kdrv_timer_perf_measure_start &rArr; kdrv_timer_perf_set &rArr; kdrv_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_timer_initialize
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_timer_perf_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_timer_perf_open
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_initialize
</UL>

<P><STRONG><a name="[1d4]"></a>kdrv_timer_perf_open</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, kdrv_timer.o(i.kdrv_timer_perf_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = kdrv_timer_perf_open
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_timer_perf_measure_start
</UL>

<P><STRONG><a name="[1d5]"></a>kdrv_timer_perf_set</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, kdrv_timer.o(i.kdrv_timer_perf_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = kdrv_timer_perf_set &rArr; kdrv_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_timer_perf_measure_start
</UL>

<P><STRONG><a name="[1d7]"></a>kdrv_uart_configure</STRONG> (Thumb, 536 bytes, Stack size 16 bytes, kdrv_uart.o(i.kdrv_uart_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = kdrv_uart_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_console_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_write
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_open
</UL>

<P><STRONG><a name="[123]"></a>kdrv_uart_console_init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, kdrv_uart.o(i.kdrv_uart_console_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = kdrv_uart_console_init &rArr; kdrv_uart_open &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_initialize
</UL>

<P><STRONG><a name="[122]"></a>kdrv_uart_initialize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kdrv_uart.o(i.kdrv_uart_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_initialize
</UL>

<P><STRONG><a name="[1d6]"></a>kdrv_uart_open</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, kdrv_uart.o(i.kdrv_uart_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = kdrv_uart_open &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_configure
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_console_init
</UL>

<P><STRONG><a name="[13a]"></a>kdrv_uart_write</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, kdrv_uart.o(i.kdrv_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kdrv_uart_write &rArr; kdrv_uart_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_configure
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_thread
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_console_puts
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1d8]"></a>kdrv_usbd3_bulk_receive</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, kdrv_usbd3.o(i.kdrv_usbd3_bulk_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = kdrv_usbd3_bulk_receive &rArr; osEventFlagsWait
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_receive
</UL>

<P><STRONG><a name="[1da]"></a>kdrv_usbd3_bulk_send</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, kdrv_usbd3.o(i.kdrv_usbd3_bulk_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = kdrv_usbd3_bulk_send &rArr; osEventFlagsWait
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_send
</UL>

<P><STRONG><a name="[1dc]"></a>kdrv_usbd3_initialize</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, kdrv_usbd3.o(i.kdrv_usbd3_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = kdrv_usbd3_initialize &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_initialize
</UL>

<P><STRONG><a name="[2ca]"></a>kdrv_usbd3_set_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, kdrv_usbd3.o(i.kdrv_usbd3_set_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_set_enable
</UL>

<P><STRONG><a name="[1c9]"></a>kdrv_write_desc_always</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, kdrv_crypto.o(i.kdrv_write_desc_always))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kdrv_write_desc_always
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_write_desc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_internal
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_write_desc_blk
</UL>

<P><STRONG><a name="[1a8]"></a>kmdw_camera_buffer_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kmdw_camera.o(i.kmdw_camera_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
</UL>

<P><STRONG><a name="[1a5]"></a>kmdw_camera_get_device_info</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kmdw_camera.o(i.kmdw_camera_get_device_info))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
</UL>

<P><STRONG><a name="[1a7]"></a>kmdw_camera_get_frame_format</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kmdw_camera.o(i.kmdw_camera_get_frame_format))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
</UL>

<P><STRONG><a name="[1f3]"></a>kmdw_camera_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, kmdw_camera.o(i.kmdw_camera_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kmdw_camera_init &rArr; kmdw_sensor_register
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_register
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdw_initialize
</UL>

<P><STRONG><a name="[1a4]"></a>kmdw_camera_open</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kmdw_camera.o(i.kmdw_camera_open))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
</UL>

<P><STRONG><a name="[1a6]"></a>kmdw_camera_set_frame_format</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kmdw_camera.o(i.kmdw_camera_set_frame_format))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
</UL>

<P><STRONG><a name="[1a9]"></a>kmdw_camera_start</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kmdw_camera.o(i.kmdw_camera_start))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
</UL>

<P><STRONG><a name="[1f5]"></a>kmdw_console_puts</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, kmdw_console.o(i.kmdw_console_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = kmdw_console_puts &rArr; kdrv_uart_write &rArr; kdrv_uart_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
</UL>

<P><STRONG><a name="[1f6]"></a>kmdw_console_set_log_level_ncpu</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, kmdw_console.o(i.kmdw_console_set_log_level_ncpu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kmdw_console_set_log_level_ncpu
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_ncpu_set_ncpu_debug_lvl
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_initialize
</UL>

<P><STRONG><a name="[1f8]"></a>kmdw_console_set_log_level_scpu</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kmdw_console.o(i.kmdw_console_set_log_level_scpu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kmdw_console_set_log_level_scpu
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_ncpu_set_scpu_debug_lvl
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_initialize
</UL>

<P><STRONG><a name="[106]"></a>kmdw_ddr_get_heap_tail</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kmdw_memory.o(i.kmdw_ddr_get_heap_tail))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_model_info
</UL>

<P><STRONG><a name="[23e]"></a>kmdw_ddr_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kmdw_memory.o(i.kmdw_ddr_init))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdw_initialize
</UL>

<P><STRONG><a name="[18f]"></a>kmdw_ddr_reserve</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, kmdw_memory.o(i.kmdw_ddr_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = kmdw_ddr_reserve &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_initialize
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_thread
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
</UL>

<P><STRONG><a name="[230]"></a>kmdw_dfs_algorithm_execution</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kmdw_dfs.o(i.kmdw_dfs_algorithm_execution))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kmdw_dfs_algorithm_execution
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_tdc_monitor_thread
</UL>

<P><STRONG><a name="[1fa]"></a>kmdw_dfs_initialize</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, kmdw_dfs.o(i.kmdw_dfs_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = kmdw_dfs_initialize &rArr; kdrv_tdc_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_tdc_set_thrd_int_enable
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_tdc_set_thrd_enflag
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_tdc_set_thrd
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_tdc_register_callback
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_tdc_initialize
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_tdc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_tdc_monitor_thread
</UL>

<P><STRONG><a name="[223]"></a>kmdw_dfs_is_algorithm_running</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kmdw_dfs.o(i.kmdw_dfs_is_algorithm_running))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
</UL>

<P><STRONG><a name="[200]"></a>kmdw_dfs_set_npu_frequency</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, kmdw_dfs.o(i.kmdw_dfs_set_npu_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = kmdw_dfs_set_npu_frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_clock_npu_clock_change
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
</UL>

<P><STRONG><a name="[202]"></a>kmdw_dfu_cfg_sts_check</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, kmdw_dfu.o(i.kmdw_dfu_cfg_sts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = kmdw_dfu_cfg_sts_check &rArr; dfu_mem_to_flash_small_block &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_get_status
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_small_block
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ncpu_fw
</UL>

<P><STRONG><a name="[203]"></a>kmdw_dfu_get_active_ncpu_partition</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, kmdw_dfu.o(i.kmdw_dfu_get_active_ncpu_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = kmdw_dfu_get_active_ncpu_partition &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_get_status
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init_partition_boot_cfg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_ncpu
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ncpu_fw
</UL>

<P><STRONG><a name="[204]"></a>kmdw_dfu_get_active_scpu_partition</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, kmdw_dfu.o(i.kmdw_dfu_get_active_scpu_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = kmdw_dfu_get_active_scpu_partition &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_get_status
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init_partition_boot_cfg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
</UL>

<P><STRONG><a name="[19a]"></a>kmdw_dfu_init</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, kmdw_dfu.o(i.kmdw_dfu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = kmdw_dfu_init &rArr; kmdw_power_manager_register
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_power_manager_register
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handler_initialize
</UL>

<P><STRONG><a name="[198]"></a>kmdw_dfu_update_model</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, kmdw_dfu.o(i.kmdw_dfu_update_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = kmdw_dfu_update_model &rArr; dfu_post_flash_verify_4kblock &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_utils_crc_gen_sum32
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update_abort
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_pre_update
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_post_flash_verify_4kblock
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_4k_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_legend_kdp_command
</UL>

<P><STRONG><a name="[195]"></a>kmdw_dfu_update_ncpu</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, kmdw_dfu.o(i.kmdw_dfu_update_ncpu))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = kmdw_dfu_update_ncpu &rArr; dfu_post_flash_verify_4kblock &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_utils_crc_gen_sum32
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_get_status
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_get_active_ncpu_partition
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_pre_update
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_post_flash_verify_4kblock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_small_block
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_4k_blocks
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_legend_kdp_command
</UL>

<P><STRONG><a name="[194]"></a>kmdw_dfu_update_scpu</STRONG> (Thumb, 446 bytes, Stack size 56 bytes, kmdw_dfu.o(i.kmdw_dfu_update_scpu))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = kmdw_dfu_update_scpu &rArr; dfu_post_flash_verify_4kblock &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_utils_crc_gen_sum32
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_get_status
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_get_active_scpu_partition
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_pre_update
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_post_flash_verify_4kblock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_small_block
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_4k_blocks
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_console_puts
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_legend_kdp_command
</UL>

<P><STRONG><a name="[191]"></a>kmdw_fifoq_manager_get_fifoq_allocated</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kmdw_fifoq_manager.o(i.kmdw_fifoq_manager_get_fifoq_allocated))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
</UL>

<P><STRONG><a name="[192]"></a>kmdw_fifoq_manager_get_fifoq_config</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, kmdw_fifoq_manager.o(i.kmdw_fifoq_manager_get_fifoq_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = kmdw_fifoq_manager_get_fifoq_config
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
</UL>

<P><STRONG><a name="[208]"></a>kmdw_fifoq_manager_image_dequeue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kmdw_fifoq_manager.o(i.kmdw_fifoq_manager_image_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = kmdw_fifoq_manager_image_dequeue &rArr; dual_fifo2_dequeue_data &rArr; osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_dequeue_data
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_image_dispatcher_thread
</UL>

<P><STRONG><a name="[1aa]"></a>kmdw_fifoq_manager_image_enqueue</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, kmdw_fifoq_manager.o(i.kmdw_fifoq_manager_image_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = kmdw_fifoq_manager_image_enqueue &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_img_send_back_thread
</UL>

<P><STRONG><a name="[162]"></a>kmdw_fifoq_manager_image_get_free_buffer</STRONG> (Thumb, 104 bytes, Stack size 120 bytes, kmdw_fifoq_manager.o(i.kmdw_fifoq_manager_image_get_free_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = kmdw_fifoq_manager_image_get_free_buffer &rArr; dual_fifo2_put_free_buffer &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_put_free_buffer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_get_free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_coming_callback
</UL>

<P><STRONG><a name="[1a1]"></a>kmdw_fifoq_manager_image_put_free_buffer</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, kmdw_fifoq_manager.o(i.kmdw_fifoq_manager_image_put_free_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = kmdw_fifoq_manager_image_put_free_buffer &rArr; dual_fifo2_put_free_buffer &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_put_free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_img_send_back_thread
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_image_dispatcher_thread
</UL>

<P><STRONG><a name="[209]"></a>kmdw_fifoq_manager_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, kmdw_fifoq_manager.o(i.kmdw_fifoq_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kmdw_fifoq_manager_init &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_create
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_init
</UL>

<P><STRONG><a name="[1ab]"></a>kmdw_fifoq_manager_result_dequeue</STRONG> (Thumb, 104 bytes, Stack size 120 bytes, kmdw_fifoq_manager.o(i.kmdw_fifoq_manager_result_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = kmdw_fifoq_manager_result_dequeue &rArr; dual_fifo2_put_free_buffer &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_put_free_buffer
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_dequeue_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_result_thread
</UL>

<P><STRONG><a name="[101]"></a>kmdw_fifoq_manager_result_enqueue</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, kmdw_fifoq_manager.o(i.kmdw_fifoq_manager_result_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = kmdw_fifoq_manager_result_enqueue &rArr; dual_fifo2_enqueue_data &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_enqueue_data
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_result_callback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_send_status_code
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_inference
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_config_post_process_parameters
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference_bypass_pre_proc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference
</UL>

<P><STRONG><a name="[183]"></a>kmdw_fifoq_manager_result_get_free_buffer</STRONG> (Thumb, 100 bytes, Stack size 104 bytes, kmdw_fifoq_manager.o(i.kmdw_fifoq_manager_result_get_free_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = kmdw_fifoq_manager_result_get_free_buffer &rArr; dual_fifo2_put_free_buffer &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_put_free_buffer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_get_free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_send_status_code
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_inference
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_config_post_process_parameters
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference_bypass_pre_proc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference
</UL>

<P><STRONG><a name="[1a2]"></a>kmdw_fifoq_manager_result_put_free_buffer</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, kmdw_fifoq_manager.o(i.kmdw_fifoq_manager_result_put_free_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = kmdw_fifoq_manager_result_put_free_buffer &rArr; dual_fifo2_put_free_buffer &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_put_free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_result_thread
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_init
</UL>

<P><STRONG><a name="[1a3]"></a>kmdw_fifoq_manager_store_fifoq_config</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, kmdw_fifoq_manager.o(i.kmdw_fifoq_manager_store_fifoq_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = kmdw_fifoq_manager_store_fifoq_config
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_init
</UL>

<P><STRONG><a name="[185]"></a>kmdw_inference_app_execute</STRONG> (Thumb, 1012 bytes, Stack size 408 bytes, kmdw_inference_720.o(i.kmdw_inference_app_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = kmdw_inference_app_execute &rArr; kmdw_model_run &rArr; kmdw_ipc_set_model &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_is_model_loaded
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_raw_img
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_input_tensor_num
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_input_tensor_info
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_config_result
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_config_img
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_inference
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference_bypass_pre_proc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference
</UL>

<P><STRONG><a name="[19c]"></a>kmdw_inference_app_get_model_raw_output_size</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, kmdw_inference_720.o(i.kmdw_inference_app_get_model_raw_output_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = kmdw_inference_app_get_model_raw_output_size &rArr; kmdw_model_get_all_model_info &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_model_info
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_all_model_info
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference_bypass_pre_proc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference
</UL>

<P><STRONG><a name="[10b]"></a>kmdw_inference_app_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kmdw_inference_720.o(i.kmdw_inference_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = kmdw_inference_app_init &rArr; kmdw_fifoq_manager_init &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_initialize
</UL>

<P><STRONG><a name="[f8]"></a>kmdw_inference_app_send_status_code</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, kmdw_inference_720.o(i.kmdw_inference_app_send_status_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = kmdw_inference_app_send_status_code &rArr; kmdw_fifoq_manager_result_get_free_buffer &rArr; dual_fifo2_put_free_buffer &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_get_free_buffer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_config_post_process_parameters
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_func
</UL>

<P><STRONG><a name="[19d]"></a>kmdw_inference_get_model_input_image_size</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, kmdw_inference_720.o(i.kmdw_inference_get_model_input_image_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = kmdw_inference_get_model_input_image_size &rArr; kmdw_model_get_all_model_info &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_model_info
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_all_model_info
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference
</UL>

<P><STRONG><a name="[39]"></a>kmdw_inference_image_dispatcher_thread</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, kmdw_inference_720.o(i.kmdw_inference_image_dispatcher_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = kmdw_inference_image_dispatcher_thread &rArr; kdp2_generic_raw_inference &rArr; kmdw_inference_app_execute &rArr; kmdw_model_run &rArr; kmdw_ipc_set_model &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_image_put_free_buffer
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_image_dequeue
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference_bypass_pre_proc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_handler.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>kmdw_inference_result_handler_callback_thread</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, kmdw_inference_720.o(i.kmdw_inference_result_handler_callback_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = kmdw_inference_result_handler_callback_thread &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_get_output
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_handler.o(.data)
</UL>
<P><STRONG><a name="[ff]"></a>kmdw_ipc_get_input</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kmdw_ipc.o(i.kmdw_ipc_get_input))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_handler
</UL>

<P><STRONG><a name="[100]"></a>kmdw_ipc_get_output</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kmdw_ipc.o(i.kmdw_ipc_get_output))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_raw_img
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_config_img
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_handler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_result_handler_callback_thread
</UL>

<P><STRONG><a name="[212]"></a>kmdw_ipc_initialize</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, kmdw_ipc.o(i.kmdw_ipc_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = kmdw_ipc_initialize &rArr; kmdw_ddr_reserve &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_ipc_enable_to_ncpu_int
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ddr_reserve
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_console_set_log_level_scpu
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_console_set_log_level_ncpu
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_init
</UL>

<P><STRONG><a name="[21e]"></a>kmdw_ipc_set_image_active</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kmdw_ipc.o(i.kmdw_ipc_set_image_active))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_config_img
</UL>

<P><STRONG><a name="[214]"></a>kmdw_ipc_set_model</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, kmdw_ipc.o(i.kmdw_ipc_set_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = kmdw_ipc_set_model &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
</UL>

<P><STRONG><a name="[222]"></a>kmdw_ipc_set_model_active</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kmdw_ipc.o(i.kmdw_ipc_set_model_active))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
</UL>

<P><STRONG><a name="[215]"></a>kmdw_ipc_trigger_int</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, kmdw_ipc.o(i.kmdw_ipc_trigger_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kmdw_ipc_trigger_int &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_ncpu_start
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_ipc_trigger_to_ncpu_int
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
</UL>

<P><STRONG><a name="[f7]"></a>kmdw_level_printf</STRONG> (Thumb, 348 bytes, Stack size 312 bytes, kmdw_console.o(i.kmdw_level_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_write
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_load_model
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_model_end_addr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_ncpu
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_model
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_user_link_status_callback
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_execute
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_result_callback
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ncpu_fw
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_config_post_process_parameters
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_func
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_initialize
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_trigger_int
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_set_model
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_initialize
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_refresh_models
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_get_active_scpu_partition
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_get_active_ncpu_partition
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_cfg_sts_check
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update_sleep
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update_deep_sleep
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_post_flash_verify_4kblock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_small_block
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_mem_to_flash_4k_blocks
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_init_partition_boot_cfg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ddr_reserve
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata_memxfer
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_stream_on
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_stream_off
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_stop_capture
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_start_capture
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_mirror
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_inc
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_gain
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_format
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_flip
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_exp_time
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_devaddress
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_aec
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_query_capability
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_led_switch
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_get_lux
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_get_format
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_get_expo
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_get_device_id
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_close
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_buffer_prepare
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_buffer_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_buffer_capture
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_input_tensor_num
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_input_tensor_info
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_all_model_info
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_model_info
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_tdc_monitor_thread
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_running_error_handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_read_BBM
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_check_cumulativeECCstauts
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_result_handler_callback_thread
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_get_model_input_image_size
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_header_read
</UL>

<P><STRONG><a name="[20d]"></a>kmdw_model_config_img</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, kmdw_model.o(i.kmdw_model_config_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kmdw_model_config_img &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_get_output
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_set_image_active
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_execute
</UL>

<P><STRONG><a name="[20e]"></a>kmdw_model_config_result</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kmdw_model.o(i.kmdw_model_config_result))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_execute
</UL>

<P><STRONG><a name="[211]"></a>kmdw_model_get_all_model_info</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, kmdw_model.o(i.kmdw_model_get_all_model_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = kmdw_model_get_all_model_info &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_get_model_input_image_size
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_get_model_raw_output_size
</UL>

<P><STRONG><a name="[187]"></a>kmdw_model_get_fw_info</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, kmdw_model.o(i.kmdw_model_get_fw_info))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
</UL>

<P><STRONG><a name="[20c]"></a>kmdw_model_get_input_tensor_info</STRONG> (Thumb, 1566 bytes, Stack size 40 bytes, kmdw_model.o(i.kmdw_model_get_input_tensor_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = kmdw_model_get_input_tensor_info &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_model_info_array_index_by_model_type
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_execute
</UL>

<P><STRONG><a name="[20b]"></a>kmdw_model_get_input_tensor_num</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, kmdw_model.o(i.kmdw_model_get_input_tensor_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = kmdw_model_get_input_tensor_num &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_model_info_array_index_by_model_type
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_execute
</UL>

<P><STRONG><a name="[190]"></a>kmdw_model_get_model_end_addr</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, kmdw_model.o(i.kmdw_model_get_model_end_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = kmdw_model_get_model_end_addr &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
</UL>

<P><STRONG><a name="[18b]"></a>kmdw_model_get_model_info</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kmdw_model.o(i.kmdw_model_get_model_info))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_get_model_input_image_size
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_get_model_raw_output_size
</UL>

<P><STRONG><a name="[210]"></a>kmdw_model_get_raw_img</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, kmdw_model.o(i.kmdw_model_get_raw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kmdw_model_get_raw_img
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_get_output
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_execute
</UL>

<P><STRONG><a name="[220]"></a>kmdw_model_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, kmdw_model.o(i.kmdw_model_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = kmdw_model_init &rArr; kmdw_ipc_initialize &rArr; kmdw_ddr_reserve &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_initialize
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ddr_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdw_initialize
</UL>

<P><STRONG><a name="[20a]"></a>kmdw_model_is_model_loaded</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, kmdw_model.o(i.kmdw_model_is_model_loaded))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = kmdw_model_is_model_loaded &rArr; _get_model_info_array_index_by_model_type
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_model_info_array_index_by_model_type
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_execute
</UL>

<P><STRONG><a name="[18c]"></a>kmdw_model_load_model</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, kmdw_model.o(i.kmdw_model_load_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = kmdw_model_load_model &rArr; _load_model_info &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_model_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_model
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
</UL>

<P><STRONG><a name="[11f]"></a>kmdw_model_refresh_models</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, kmdw_model.o(i.kmdw_model_refresh_models))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = kmdw_model_refresh_models &rArr; _load_model_info &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_model_info
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update_abort
</UL>

<P><STRONG><a name="[188]"></a>kmdw_model_reload_model_info</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kmdw_model.o(i.kmdw_model_reload_model_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = kmdw_model_reload_model_info &rArr; _load_model_info &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_model_info
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
</UL>

<P><STRONG><a name="[20f]"></a>kmdw_model_run</STRONG> (Thumb, 880 bytes, Stack size 64 bytes, kmdw_model.o(i.kmdw_model_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = kmdw_model_run &rArr; kmdw_ipc_set_model &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_get_output
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_trigger_int
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_set_model_active
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_set_model
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ddr_reserve
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_set_npu_frequency
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_is_algorithm_running
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_model_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_model
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_model_info_array_index_by_model_type
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_execute
</UL>

<P><STRONG><a name="[205]"></a>kmdw_power_manager_register</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, kmdw_power_manager.o(i.kmdw_power_manager_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = kmdw_power_manager_register
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_init
</UL>

<P><STRONG><a name="[225]"></a>kmdw_power_manager_shutdown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kmdw_power_manager.o(i.kmdw_power_manager_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kmdw_power_manager_shutdown &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_user_control_callback
</UL>

<P><STRONG><a name="[226]"></a>kmdw_sbt_flash_fw_loader</STRONG> (Thumb, 436 bytes, Stack size 200 bytes, kmdw_sbt.o(i.kmdw_sbt_flash_fw_loader))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = kmdw_sbt_flash_fw_loader &rArr; kmdw_sbt_flash_header_read &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_initialize
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_blk
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_aes_initialize
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_aes_cbc_decrypt
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_header_read
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_t_convert
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_efuse_get_key
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_efuse_get_iv
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_efuse_get_auth
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ncpu_fw
</UL>

<P><STRONG><a name="[229]"></a>kmdw_sbt_flash_header_read</STRONG> (Thumb, 120 bytes, Stack size 88 bytes, kmdw_sbt.o(i.kmdw_sbt_flash_header_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = kmdw_sbt_flash_header_read &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_aes_cbc_decrypt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_t_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
</UL>

<P><STRONG><a name="[22b]"></a>kmdw_sbt_get_boot_flag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kmdw_sbt.o(i.kmdw_sbt_get_boot_flag))
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_efuse_get_enc_boot_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ncpu_fw
</UL>

<P><STRONG><a name="[1df]"></a>kmdw_sensor_get_dev_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kmdw_sensor.o(i.kmdw_sensor_get_dev_id))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_get_device_id
</UL>

<P><STRONG><a name="[1e0]"></a>kmdw_sensor_get_expo</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kmdw_sensor.o(i.kmdw_sensor_get_expo))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_get_expo
</UL>

<P><STRONG><a name="[1e1]"></a>kmdw_sensor_get_lux</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, kmdw_sensor.o(i.kmdw_sensor_get_lux))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kmdw_sensor_get_lux
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_get_lux
</UL>

<P><STRONG><a name="[1e5]"></a>kmdw_sensor_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, kmdw_sensor.o(i.kmdw_sensor_init))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_open
</UL>

<P><STRONG><a name="[1e2]"></a>kmdw_sensor_led_switch</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kmdw_sensor.o(i.kmdw_sensor_led_switch))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_led_switch
</UL>

<P><STRONG><a name="[1f4]"></a>kmdw_sensor_register</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kmdw_sensor.o(i.kmdw_sensor_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = kmdw_sensor_register
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_cam_sensor_register
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_cam_sensor_get_drv_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_camera_init
</UL>

<P><STRONG><a name="[1f0]"></a>kmdw_sensor_s_stream</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kmdw_sensor.o(i.kmdw_sensor_s_stream))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_stop_capture
</UL>

<P><STRONG><a name="[1e6]"></a>kmdw_sensor_set_aec</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kmdw_sensor.o(i.kmdw_sensor_set_aec))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_aec
</UL>

<P><STRONG><a name="[1e7]"></a>kmdw_sensor_set_devaddress</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kmdw_sensor.o(i.kmdw_sensor_set_devaddress))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_devaddress
</UL>

<P><STRONG><a name="[1e8]"></a>kmdw_sensor_set_exp_time</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kmdw_sensor.o(i.kmdw_sensor_set_exp_time))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_exp_time
</UL>

<P><STRONG><a name="[1e9]"></a>kmdw_sensor_set_flip</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kmdw_sensor.o(i.kmdw_sensor_set_flip))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_flip
</UL>

<P><STRONG><a name="[1eb]"></a>kmdw_sensor_set_gain</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kmdw_sensor.o(i.kmdw_sensor_set_gain))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_gain
</UL>

<P><STRONG><a name="[1ec]"></a>kmdw_sensor_set_inc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kmdw_sensor.o(i.kmdw_sensor_set_inc))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_inc
</UL>

<P><STRONG><a name="[1ed]"></a>kmdw_sensor_set_mirror</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kmdw_sensor.o(i.kmdw_sensor_set_mirror))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_cam_set_mirror
</UL>

<P><STRONG><a name="[37]"></a>kmdw_tdc_monitor_thread</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, kmdw_tdc.o(i.kmdw_tdc_monitor_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = kmdw_tdc_monitor_thread &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_initialize
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfs_algorithm_execution
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_tdc_update
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_tdc_get_temp_fixed_point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_handler.o(.data)
</UL>
<P><STRONG><a name="[207]"></a>kmdw_utils_crc_gen_sum32</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, kmdw_utils_crc.o(i.kmdw_utils_crc_gen_sum32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kmdw_utils_crc_gen_sum32
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_ncpu
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_model
</UL>

<P><STRONG><a name="[231]"></a>load_ncpu_fw</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, kmdw_system.o(i.load_ncpu_fw))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = load_ncpu_fw &rArr; kmdw_sbt_flash_fw_loader &rArr; kmdw_sbt_flash_header_read &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_get_boot_flag
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_ncpu_set_stall
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_ncpu_reset
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_ncpu_boot_initialize
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_mpu_niram_enable
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_mpu_niram_disable
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_get_active_ncpu_partition
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_cfg_sts_check
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdw_initialize
</UL>

<P><STRONG><a name="[36]"></a>logger_thread</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, kmdw_console.o(i.logger_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = logger_thread &rArr; kmdw_ddr_reserve &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ddr_reserve
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_write
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_handler.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>main</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2148<LI>Call Chain = main &rArr; dev_initialize &rArr; kdev_flash_initialize &rArr; kdev_flash_read_status &rArr; kdev_flash_read_SFDP &rArr; kdrv_spif_check_status_till_ready &rArr; kdrv_spif_set_commands
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_initialize
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_initialize
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdw_initialize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_initialize
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_initialize
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_initialize
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d8]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_usbd3_initialize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ncpu_fw
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_config_post_process_parameters
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errand_thread
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_block_backup
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_generic_raw_inference
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_create
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_open
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[239]"></a>mdw_initialize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, middleware_init.o(i.mdw_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = mdw_initialize &rArr; load_ncpu_fw &rArr; kmdw_sbt_flash_fw_loader &rArr; kmdw_sbt_flash_header_read &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ncpu_fw
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ddr_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_camera_init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>osDelay</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_delay.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_usbd3_initialize
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_usbd3_bulk_send
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_legend_kdp_command
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_trigger_int
</UL>

<P><STRONG><a name="[224]"></a>osEventFlagsClear</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rtx_evflags.o(i.osEventFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osEventFlagsClear
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsClearDone
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsClear
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_clr32
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
</UL>

<P><STRONG><a name="[1dd]"></a>osEventFlagsNew</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_evflags.o(i.osEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osEventFlagsNew
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsNew
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_usbd3_initialize
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
</UL>

<P><STRONG><a name="[fe]"></a>osEventFlagsSet</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rtx_evflags.o(i.osEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsSetDone
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsSet
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_set32
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd3_isr
</UL>

<P><STRONG><a name="[1d9]"></a>osEventFlagsWait</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, rtx_evflags.o(i.osEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osEventFlagsWait
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitNotCompleted
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWait
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_chk32_any
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_usbd3_bulk_send
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_usbd3_bulk_receive
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_result_handler_callback_thread
</UL>

<P><STRONG><a name="[23c]"></a>osKernelGetState</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>osKernelGetSysTimerCount</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rtx_kernel.o(i.osKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetOverflow
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetInterval
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetCount
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetSysTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_handler
</UL>

<P><STRONG><a name="[21a]"></a>osKernelGetTickCount</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_tdc_monitor_thread
</UL>

<P><STRONG><a name="[21b]"></a>osKernelGetTickFreq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>

<P><STRONG><a name="[23a]"></a>osKernelInitialize</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23d]"></a>osKernelStart</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelStart
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>osMessageQueueDelete</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_msgqueue.o(i.osMessageQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMessageQueueDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_create
</UL>

<P><STRONG><a name="[132]"></a>osMessageQueueGet</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32_nz
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_wr8
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_img_send_back_thread
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_coming_callback
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errand_thread
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_fifoq_manager_enqueue_image_thread
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_get_free_buffer
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_dequeue_data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[12e]"></a>osMessageQueueNew</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtx_msgqueue.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMessageQueueNew
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNew
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_initialize
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_create
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[134]"></a>osMessageQueuePut</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_image_enqueue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_coming_callback
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_put_free_buffer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_fifo2_enqueue_data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[160]"></a>osMutexAcquire</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_mutex.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_send
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_receive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_tx_rx
</UL>

<P><STRONG><a name="[15f]"></a>osMutexNew</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_mutex.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_initialize
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_thread
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_tx_rx
</UL>

<P><STRONG><a name="[161]"></a>osMutexRelease</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_mutex.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_send
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_receive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_tx_rx
</UL>

<P><STRONG><a name="[26a]"></a>osRtxErrorNotify</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtx_config.o(i.osRtxErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>

<P><STRONG><a name="[b1]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[256]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(i.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[26d]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_memory.o(i.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[26f]"></a>osRtxMemoryFree</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rtx_memory.o(i.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
</UL>

<P><STRONG><a name="[271]"></a>osRtxMemoryInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rtx_memory.o(i.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[263]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_mempool.o(i.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[276]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtx_mempool.o(i.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[279]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rtx_mempool.o(i.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[27e]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rtx_mutex.o(i.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[cf]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rtx_system.o(i.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[248]"></a>osRtxPostProcess</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_system.o(i.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<P><STRONG><a name="[285]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadDelayTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[283]"></a>osRtxThreadDispatch</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
</UL>

<P><STRONG><a name="[27b]"></a>osRtxThreadListGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[2b2]"></a>osRtxThreadListPut</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListPut))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[26b]"></a>osRtxThreadListRemove</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[2bc]"></a>osRtxThreadListSort</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListSort))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[29c]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadReadyPut))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[27c]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[290]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadStackCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[296]"></a>osRtxThreadStartup</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[297]"></a>osRtxThreadSwitch</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[298]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[26c]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueDelete
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[d0]"></a>osRtxTick_Handler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_system.o(i.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b2]"></a>osRtxTimerThread</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_timer.o(i.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[bf]"></a>osThreadExit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_thread.o(i.osThreadExit))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[237]"></a>osThreadFlagsClear</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_thread.o(i.osThreadFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadFlagsClear
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsClear
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_thread
</UL>

<P><STRONG><a name="[ed]"></a>osThreadFlagsSet</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_set32
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSetDone
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSet
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_power_manager_shutdown
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_user_link_status_callback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCPU_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdma_isr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_timer_irqhandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_irqhandler
</UL>

<P><STRONG><a name="[120]"></a>osThreadFlagsWait</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadFlagsWait
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWait
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update_sleep
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_update_deep_sleep
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_thread
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_tdc_monitor_thread
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_tx_rx
</UL>

<P><STRONG><a name="[137]"></a>osThreadGetId</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_thread.o(i.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_thread
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errand_thread
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_tdc_monitor_thread
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_tx_rx
</UL>

<P><STRONG><a name="[2a7]"></a>osThreadNew</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_initialize
</UL>

<P><STRONG><a name="[2a9]"></a>osTimerDelete</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_timer.o(i.osTimerDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osTimerDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oneshot_callback
</UL>

<P><STRONG><a name="[138]"></a>osTimerNew</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rtx_timer.o(i.osTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerNew
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errand_thread
</UL>

<P><STRONG><a name="[139]"></a>osTimerStart</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_timer.o(i.osTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStart
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errand_thread
</UL>

<P><STRONG><a name="[238]"></a>sys_initialize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_init.o(i.sys_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_initialize &rArr; kdrv_system_initialize &rArr; kdrv_power_set_powermode
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_system_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23b]"></a>task_initialize</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, task_handler.o(i.task_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = task_initialize &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>usb_user_control_callback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, kdp2_hico_mipi.o(i.usb_user_control_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usb_user_control_callback &rArr; kmdw_power_manager_shutdown &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_power_manager_shutdown
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_power_sw_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdp2_hico_mipi.o(i.kdp2_hico_mipi_init)
</UL>
<P><STRONG><a name="[fb]"></a>usbd_hal_bulk_receive</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, usbd_hal_720.o(i.usbd_hal_bulk_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usbd_hal_bulk_receive &rArr; kdrv_usbd3_bulk_receive &rArr; osEventFlagsWait
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_usbd3_bulk_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_read_callback
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
</UL>

<P><STRONG><a name="[189]"></a>usbd_hal_bulk_send</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, usbd_hal_720.o(i.usbd_hal_bulk_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usbd_hal_bulk_send &rArr; kdrv_usbd3_bulk_send &rArr; osEventFlagsWait
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_usbd3_bulk_send
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_legend_kdp_command
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_cmd_handle_kp_command
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_result_thread
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_img_send_back_thread
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_usb_cmd_thread
</UL>

<P><STRONG><a name="[19f]"></a>usbd_hal_initialize</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, usbd_hal_720.o(i.usbd_hal_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_hal_initialize &rArr; kdrv_usbd3_initialize &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_usbd3_initialize
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_init
</UL>

<P><STRONG><a name="[1a0]"></a>usbd_hal_set_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_hal_720.o(i.usbd_hal_set_enable))
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_usbd3_set_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_hico_mipi_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8f]"></a>_app_func</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, application_init.o(i._app_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = _app_func &rArr; kdp2_app_yolo_inference &rArr; kmdw_inference_app_execute &rArr; kmdw_model_run &rArr; kmdw_ipc_set_model &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_inference_app_send_status_code
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_inference
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_config_post_process_parameters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application_init.o(i.app_initialize)
</UL>
<P><STRONG><a name="[184]"></a>get_model_post_proc_param</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, kdp2_inf_app_yolo.o(i.get_model_post_proc_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_model_post_proc_param
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_inference
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdp2_app_yolo_config_post_process_parameters
</UL>

<P><STRONG><a name="[95]"></a>usb_user_link_status_callback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, kdp2_hico_mipi.o(i.usb_user_link_status_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = usb_user_link_status_callback &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdp2_hico_mipi.o(i.kdp2_hico_mipi_init)
</UL>
<P><STRONG><a name="[93]"></a>_flash_read_callback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, kdp2_cmd_handler_720.o(i._flash_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _flash_read_callback &rArr; usbd_hal_bulk_receive &rArr; kdrv_usbd3_bulk_receive &rArr; osEventFlagsWait
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hal_bulk_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdp2_cmd_handler_720.o(i.kdp2_cmd_handler_initialize)
</UL>
<P><STRONG><a name="[114]"></a>dfu_init_partition_boot_cfg</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, kmdw_dfu.o(i.dfu_init_partition_boot_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dfu_init_partition_boot_cfg &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_get_status
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_get_active_scpu_partition
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_get_active_ncpu_partition
</UL>

<P><STRONG><a name="[119]"></a>dfu_mem_to_flash_4k_blocks</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, kmdw_dfu.o(i.dfu_mem_to_flash_4k_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = dfu_mem_to_flash_4k_blocks &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_get_status
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_ncpu
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_model
</UL>

<P><STRONG><a name="[11a]"></a>dfu_mem_to_flash_small_block</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, kmdw_dfu.o(i.dfu_mem_to_flash_small_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = dfu_mem_to_flash_small_block &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_programdata
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_get_status
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_erase_sector
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_ncpu
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_cfg_sts_check
</UL>

<P><STRONG><a name="[11d]"></a>dfu_post_flash_verify_4kblock</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, kmdw_dfu.o(i.dfu_post_flash_verify_4kblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = dfu_post_flash_verify_4kblock &rArr; kdev_flash_readdata &rArr; kdev_flash_running_error_handler &rArr; kdev_flash_programdata &rArr; kdev_flash_check_cumulativeECCstauts &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_get_status
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdev_flash_readdata
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_ncpu
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_model
</UL>

<P><STRONG><a name="[206]"></a>dfu_pre_update</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, kmdw_dfu.o(i.dfu_pre_update))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_scpu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_ncpu
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_model
</UL>

<P><STRONG><a name="[11e]"></a>dfu_update_abort</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, kmdw_dfu.o(i.dfu_update_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dfu_update_abort &rArr; kmdw_model_refresh_models &rArr; _load_model_info &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_refresh_models
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_dfu_update_model
</UL>

<P><STRONG><a name="[c7]"></a>dfu_update_deep_sleep</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, kmdw_dfu.o(i.dfu_update_deep_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dfu_update_deep_sleep &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_dfu.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>dfu_update_sleep</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, kmdw_dfu.o(i.dfu_update_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dfu_update_sleep &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_dfu.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>NCPU_IRQHandler</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, kmdw_ipc.o(i.NCPU_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NCPU_IRQHandler &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hook_ncpu_stop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_ipc_clear_from_ncpu_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_ipc.o(i.kmdw_ipc_initialize)
</UL>
<P><STRONG><a name="[90]"></a>timer_oneshot_callback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kmdw_errandserv.o(i.timer_oneshot_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_oneshot_callback &rArr; osTimerDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_errandserv.o(i.errand_thread)
</UL>
<P><STRONG><a name="[21f]"></a>_get_model_info_array_index_by_model_type</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, kmdw_model.o(i._get_model_info_array_index_by_model_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_model_info_array_index_by_model_type
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_is_model_loaded
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_input_tensor_num
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_get_input_tensor_info
</UL>

<P><STRONG><a name="[9e]"></a>_ipc_handler</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, kmdw_model.o(i._ipc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _ipc_handler &rArr; kmdw_fifoq_manager_result_enqueue &rArr; dual_fifo2_enqueue_data &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_get_output
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ipc_get_input
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_fifoq_manager_result_enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_model.o(i.kmdw_model_init)
</UL>
<P><STRONG><a name="[221]"></a>_load_model</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, kmdw_model.o(i._load_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _load_model
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_load_model
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
</UL>

<P><STRONG><a name="[103]"></a>_load_model_info</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, kmdw_model.o(i._load_model_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _load_model_info &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_ddr_get_heap_tail
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_reload_model_info
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_load_model
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_refresh_models
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_model_run
</UL>

<P><STRONG><a name="[8]"></a>kmdw_cam_buffer_capture</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kmdw_camera_kl720.o(i.kmdw_cam_buffer_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = kmdw_cam_buffer_capture &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>kmdw_cam_buffer_init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, kmdw_camera_kl720.o(i.kmdw_cam_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = kmdw_cam_buffer_init &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_dpi2ahb_buf_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>kmdw_cam_buffer_prepare</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kmdw_camera_kl720.o(i.kmdw_cam_buffer_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = kmdw_cam_buffer_prepare &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>kmdw_cam_close</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, kmdw_camera_kl720.o(i.kmdw_cam_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = kmdw_cam_close &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_clock_set_csiclk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>kmdw_cam_get_device_id</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, kmdw_camera_kl720.o(i.kmdw_cam_get_device_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kmdw_cam_get_device_id &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_get_dev_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>kmdw_cam_get_expo</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, kmdw_camera_kl720.o(i.kmdw_cam_get_expo))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kmdw_cam_get_expo &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_get_expo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>kmdw_cam_get_format</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kmdw_camera_kl720.o(i.kmdw_cam_get_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kmdw_cam_get_format &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>kmdw_cam_get_lux</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, kmdw_camera_kl720.o(i.kmdw_cam_get_lux))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = kmdw_cam_get_lux &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_get_lux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>kmdw_cam_led_switch</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, kmdw_camera_kl720.o(i.kmdw_cam_led_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kmdw_cam_led_switch &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_led_switch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>kmdw_cam_open</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kmdw_camera_kl720.o(i.kmdw_cam_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kmdw_cam_open &rArr; kdrv_clock_set_csiclk
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_dpi2ahb_src_config
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_csirx_set_enable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_clock_set_csiclk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>kmdw_cam_query_capability</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, kmdw_camera_kl720.o(i.kmdw_cam_query_capability))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kmdw_cam_query_capability &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>kmdw_cam_set_aec</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, kmdw_camera_kl720.o(i.kmdw_cam_set_aec))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kmdw_cam_set_aec &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_set_aec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>kmdw_cam_set_cam_port</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kmdw_camera_kl720.o(i.kmdw_cam_set_cam_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kmdw_cam_set_cam_port
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_dpi2ahb_src_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>kmdw_cam_set_clock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kmdw_camera_kl720.o(i.kmdw_cam_set_clock))
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>kmdw_cam_set_devaddress</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, kmdw_camera_kl720.o(i.kmdw_cam_set_devaddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = kmdw_cam_set_devaddress &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_set_devaddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>kmdw_cam_set_exp_time</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, kmdw_camera_kl720.o(i.kmdw_cam_set_exp_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kmdw_cam_set_exp_time &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_set_exp_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>kmdw_cam_set_flip</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, kmdw_camera_kl720.o(i.kmdw_cam_set_flip))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kmdw_cam_set_flip &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_set_flip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>kmdw_cam_set_format</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, kmdw_camera_kl720.o(i.kmdw_cam_set_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = kmdw_cam_set_format &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_dpi2ahb_set_para
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_csirx_set_para
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>kmdw_cam_set_gain</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, kmdw_camera_kl720.o(i.kmdw_cam_set_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = kmdw_cam_set_gain &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_set_gain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>kmdw_cam_set_inc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, kmdw_camera_kl720.o(i.kmdw_cam_set_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kmdw_cam_set_inc &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_set_inc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>kmdw_cam_set_mirror</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, kmdw_camera_kl720.o(i.kmdw_cam_set_mirror))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kmdw_cam_set_mirror &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_set_mirror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>kmdw_cam_start_capture</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, kmdw_camera_kl720.o(i.kmdw_cam_start_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = kmdw_cam_start_capture &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_dpi2ahb_start
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_csirx_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>kmdw_cam_stop_capture</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, kmdw_camera_kl720.o(i.kmdw_cam_stop_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = kmdw_cam_stop_capture &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sensor_s_stream
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_dpi2ahb_stop
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_csirx_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>kmdw_cam_stream_off</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kmdw_camera_kl720.o(i.kmdw_cam_stream_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = kmdw_cam_stream_off &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>kmdw_cam_stream_on</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kmdw_camera_kl720.o(i.kmdw_cam_stream_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = kmdw_cam_stream_on &rArr; kmdw_level_printf &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_level_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_camera_kl720.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>kmdw_dfs_tdc_callback</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, kmdw_dfs.o(i.kmdw_dfs_tdc_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kmdw_dfs_tdc_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_tdc_int_status_read
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_tdc_set_thrd_int_enable
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_tdc_set_thrd_enflag
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_tdc_set_thrd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kmdw_dfs.o(i.kmdw_dfs_initialize)
</UL>
<P><STRONG><a name="[1e]"></a>kdev_sensor_enum_fmt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, kdev_sensor_gc2145.o(i.kdev_sensor_enum_fmt))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_gc2145.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>kdev_sensor_get_dev_id</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, kdev_sensor_gc2145.o(i.kdev_sensor_get_dev_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = kdev_sensor_get_dev_id &rArr; kdrv_i2c_read_register &rArr; i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_read_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_gc2145.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>kdev_sensor_get_fmt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kdev_sensor_gc2145.o(i.kdev_sensor_get_fmt))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_gc2145.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>kdev_sensor_get_lux</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, kdev_sensor_gc2145.o(i.kdev_sensor_get_lux))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = kdev_sensor_get_lux &rArr; kdrv_i2c_read_register &rArr; i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_write_register
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_read_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_gc2145.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>kdev_sensor_init</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, kdev_sensor_gc2145.o(i.kdev_sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = kdev_sensor_init &rArr; kdrv_i2c_read_register &rArr; i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_gpio_write_pin
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_write_register
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_read_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_gc2145.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>kdev_sensor_power</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kdev_sensor_gc2145.o(i.kdev_sensor_power))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_gc2145.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>kdev_sensor_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kdev_sensor_gc2145.o(i.kdev_sensor_reset))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_gc2145.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>kdev_sensor_set_aec</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, kdev_sensor_gc2145.o(i.kdev_sensor_set_aec))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = kdev_sensor_set_aec &rArr; kdrv_i2c_write_register &rArr; i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_write_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_gc2145.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>kdev_sensor_set_devaddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kdev_sensor_gc2145.o(i.kdev_sensor_set_devaddress))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_gc2145.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>kdev_sensor_set_fmt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kdev_sensor_gc2145.o(i.kdev_sensor_set_fmt))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_gc2145.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>kdev_sensor_stream</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kdev_sensor_gc2145.o(i.kdev_sensor_stream))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_gc2145.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>kdev_sensor_enum_fmt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_enum_fmt))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>kdev_sensor_get_dev_id</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_get_dev_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = kdev_sensor_get_dev_id &rArr; kdrv_i2c_read_register &rArr; i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_read_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>kdev_sensor_get_fmt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_get_fmt))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>kdev_sensor_init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = kdev_sensor_init &rArr; kdrv_i2c_read_register &rArr; i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_gpio_write_pin
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_delay_us
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_write_register
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_read_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>kdev_sensor_led_switch</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_led_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = kdev_sensor_led_switch &rArr; kdrv_i2c_write_register &rArr; i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_write_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>kdev_sensor_power</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_power))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>kdev_sensor_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_reset))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>kdev_sensor_set_devaddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_set_devaddress))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>kdev_sensor_set_exp_time</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_set_exp_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = kdev_sensor_set_exp_time &rArr; kdrv_i2c_write_register &rArr; i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_write_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>kdev_sensor_set_flip</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_set_flip))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = kdev_sensor_set_flip &rArr; kdrv_i2c_read_register &rArr; i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_write_register
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_read_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>kdev_sensor_set_fmt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_set_fmt))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>kdev_sensor_set_gain</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_set_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = kdev_sensor_set_gain &rArr; kdrv_i2c_write_register &rArr; i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_write_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>kdev_sensor_set_mirror</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_set_mirror))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = kdev_sensor_set_mirror &rArr; kdrv_i2c_read_register &rArr; i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_write_register
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_read_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>kdev_sensor_stream</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kdev_sensor_sc132gs.o(i.kdev_sensor_stream))
<BR>[Address Reference Count : 1]<UL><LI> kdev_sensor_sc132gs.o(.data)
</UL>
<P><STRONG><a name="[f2]"></a>UART_RX_ISR</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, kdrv_uart.o(i.UART_RX_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_RX_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
</UL>

<P><STRONG><a name="[f1]"></a>UART_TX_ISR</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, kdrv_uart.o(i.UART_TX_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_TX_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_uart_write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
</UL>

<P><STRONG><a name="[9a]"></a>_default_status_isr_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kdrv_usbd3.o(i._default_status_isr_callback))
<BR>[Address Reference Count : 1]<UL><LI> kdrv_usbd3.o(i.kdrv_usbd3_initialize)
</UL>
<P><STRONG><a name="[9b]"></a>_default_usr_cx_isr_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kdrv_usbd3.o(i._default_usr_cx_isr_callback))
<BR>[Address Reference Count : 1]<UL><LI> kdrv_usbd3.o(i.kdrv_usbd3_initialize)
</UL>
<P><STRONG><a name="[15c]"></a>cx_txfer_data_send</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, kdrv_usbd3.o(i.cx_txfer_data_send))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd3_isr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_standard_request
</UL>

<P><STRONG><a name="[15b]"></a>handle_standard_request</STRONG> (Thumb, 1434 bytes, Stack size 40 bytes, kdrv_usbd3.o(i.handle_standard_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = handle_standard_request &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cx_txfer_data_send
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd3_isr
</UL>

<P><STRONG><a name="[91]"></a>set_sel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kdrv_usbd3.o(i.set_sel))
<BR>[Address Reference Count : 1]<UL><LI> kdrv_usbd3.o(i.handle_standard_request)
</UL>
<P><STRONG><a name="[99]"></a>usbd3_isr</STRONG> (Thumb, 1472 bytes, Stack size 56 bytes, kdrv_usbd3.o(i.usbd3_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = usbd3_isr &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_standard_request
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cx_txfer_data_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdrv_usbd3.o(i.kdrv_usbd3_initialize)
</UL>
<P><STRONG><a name="[98]"></a>kdrv_tdc_isr</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, kdrv_tdc.o(i.kdrv_tdc_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kdrv_tdc_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdrv_tdc.o(i.kdrv_tdc_initialize)
</UL>
<P><STRONG><a name="[97]"></a>gdma_isr</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, kdrv_gdma3.o(i.gdma_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gdma_isr &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kdrv_gdma3.o(i.kdrv_gdma_initialize)
</UL>
<P><STRONG><a name="[15e]"></a>i2c_tx_rx</STRONG> (Thumb, 512 bytes, Stack size 64 bytes, kdrv_i2c.o(i.i2c_tx_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = i2c_tx_rx &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_write_register
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_i2c_read_register
</UL>

<P><STRONG><a name="[9f]"></a>svcRtxDelay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_delay.o(i.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(i.osDelay)
</UL>
<P><STRONG><a name="[bd]"></a>osRtxEventFlagsPostProcess</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rtx_evflags.o(i.osRtxEventFlagsPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxEventFlagsPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_chk32_any
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_chk32_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.svcRtxEventFlagsNew)
</UL>
<P><STRONG><a name="[a0]"></a>svcRtxEventFlagsClear</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_evflags.o(i.svcRtxEventFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcRtxEventFlagsClear
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsClearDone
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_clr32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.osEventFlagsClear)
</UL>
<P><STRONG><a name="[a1]"></a>svcRtxEventFlagsNew</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_evflags.o(i.svcRtxEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxEventFlagsNew &rArr; osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.osEventFlagsNew)
</UL>
<P><STRONG><a name="[a2]"></a>svcRtxEventFlagsSet</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, rtx_evflags.o(i.svcRtxEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxEventFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsSetDone
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_chk32_any
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_chk32_all
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_set32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.osEventFlagsSet)
</UL>
<P><STRONG><a name="[a3]"></a>svcRtxEventFlagsWait</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, rtx_evflags.o(i.svcRtxEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxEventFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitPending
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitNotCompleted
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_chk32_any
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_chk32_all
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.osEventFlagsWait)
</UL>
<P><STRONG><a name="[a4]"></a>svcRtxKernelGetState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetState)
</UL>
<P><STRONG><a name="[a5]"></a>svcRtxKernelGetSysTimerCount</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtx_kernel.o(i.svcRtxKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcRtxKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetOverflow
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetInterval
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetCount
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetSysTimerCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetSysTimerCount)
</UL>
<P><STRONG><a name="[a6]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[a7]"></a>svcRtxKernelGetTickFreq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetTickFreq)
</UL>
<P><STRONG><a name="[a8]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, rtx_kernel.o(i.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[a9]"></a>svcRtxKernelStart</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, rtx_kernel.o(i.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[eb]"></a>MessageQueuePut</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rtx_msgqueue.o(i.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[be]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[aa]"></a>svcRtxMessageQueueDelete</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rtx_msgqueue.o(i.svcRtxMessageQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxMessageQueueDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueDelete)
</UL>
<P><STRONG><a name="[ab]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32_nz
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_wr8
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueGet)
</UL>
<P><STRONG><a name="[ac]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueNew)
</UL>
<P><STRONG><a name="[ad]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueuePut)
</UL>
<P><STRONG><a name="[ae]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, rtx_mutex.o(i.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexAcquire)
</UL>
<P><STRONG><a name="[af]"></a>svcRtxMutexNew</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_mutex.o(i.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexNew)
</UL>
<P><STRONG><a name="[b0]"></a>svcRtxMutexRelease</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, rtx_mutex.o(i.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[29a]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, rtx_thread.o(i.osRtxThreadDelayRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = osRtxThreadDelayRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[292]"></a>osRtxThreadFree</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[c0]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_any
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_all
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[b4]"></a>svcRtxThreadExit</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, rtx_thread.o(i.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[b5]"></a>svcRtxThreadFlagsClear</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtx_thread.o(i.svcRtxThreadFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadFlagsClear
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_clr32
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsClearDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadFlagsClear)
</UL>
<P><STRONG><a name="[b6]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, rtx_thread.o(i.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxThreadFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_any
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_all
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_set32
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSetDone
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[b7]"></a>svcRtxThreadFlagsWait</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, rtx_thread.o(i.svcRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxThreadFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_any
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_all
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitPending
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitNotCompleted
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[b8]"></a>svcRtxThreadGetId</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_thread.o(i.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetId)
</UL>
<P><STRONG><a name="[b9]"></a>svcRtxThreadNew</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, rtx_thread.o(i.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadNew)
</UL>
<P><STRONG><a name="[b3]"></a>osRtxTimerTick</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_timer.o(i.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osRtxTimerThread)
</UL>
<P><STRONG><a name="[ba]"></a>svcRtxTimerDelete</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, rtx_timer.o(i.svcRtxTimerDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxTimerDelete &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osTimerDelete)
</UL>
<P><STRONG><a name="[bb]"></a>svcRtxTimerNew</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, rtx_timer.o(i.svcRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxTimerNew &rArr; osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osTimerNew)
</UL>
<P><STRONG><a name="[bc]"></a>svcRtxTimerStart</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, rtx_timer.o(i.svcRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStarted
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osTimerStart)
</UL>
<P><STRONG><a name="[113]"></a>fuzzy_rule_setup</STRONG> (Thumb, 838 bytes, Stack size 112 bytes, dfs_fuzzy.o(i.fuzzy_rule_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fuzzy_rule_setup &rArr; fuzzy_set_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_set_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_consequent_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_consequent_add_output
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_antecedent_join_and
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_rule_antecedent_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_add_fuzzy_set
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_input_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_input_add_fuzzy_set
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_add_rule
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_add_output
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_add_input
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fuzzy_init
</UL>

<P><STRONG><a name="[228]"></a>block_t_convert</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kmdw_sbt.o(i.block_t_convert))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_fw_loader
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmdw_sbt_flash_header_read
</UL>

<P><STRONG><a name="[148]"></a>abs_float</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fuzzy_io.o(i.abs_float))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_rebuild
</UL>

<P><STRONG><a name="[147]"></a>fuzzy_output_rebuild</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, fuzzy_io.o(i.fuzzy_output_rebuild))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fuzzy_output_rebuild
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_float
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_output_truncate
</UL>

<P><STRONG><a name="[1ad]"></a>block_t_convert</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kdrv_aes.o(i.block_t_convert))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_aes_build_descr
</UL>

<P><STRONG><a name="[1ac]"></a>kdrv_aes_build_descr</STRONG> (Thumb, 442 bytes, Stack size 376 bytes, kdrv_aes.o(i.kdrv_aes_build_descr))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = kdrv_aes_build_descr &rArr; kdrv_write_desc_blk &rArr; kdrv_write_desc_always
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_cryptodma_run_sg
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_crypto_set_last_desc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_write_desc_blk
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_set_hw_config_for_key
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_t_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_aes_cbc
</UL>

<P><STRONG><a name="[1b2]"></a>kdrv_aes_cbc</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, kdrv_aes.o(i.kdrv_aes_cbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = kdrv_aes_cbc &rArr; kdrv_aes_build_descr &rArr; kdrv_write_desc_blk &rArr; kdrv_write_desc_always
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_aes_build_descr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_aes_cbc_decrypt
</UL>

<P><STRONG><a name="[1ae]"></a>kdrv_set_hw_config_for_key</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, kdrv_aes.o(i.kdrv_set_hw_config_for_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kdrv_set_hw_config_for_key
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_aes_build_descr
</UL>

<P><STRONG><a name="[1af]"></a>kdrv_write_desc_blk</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, kdrv_aes.o(i.kdrv_write_desc_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = kdrv_write_desc_blk &rArr; kdrv_write_desc_always
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_write_desc_always
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_aes_build_descr
</UL>

<P><STRONG><a name="[1c4]"></a>kdrv_hash_internal</STRONG> (Thumb, 406 bytes, Stack size 264 bytes, kdrv_hash.o(i.kdrv_hash_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = kdrv_hash_internal &rArr; kdrv_write_desc &rArr; kdrv_write_desc_always
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_crypto_set_desc_invalid_bytes
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_get_state_size
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_get_digest_size
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_get_block_size
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_write_desc
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_write_desc_always
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_cryptodma_run_sg
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_crypto_set_last_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_array_blk
</UL>

<P><STRONG><a name="[1c8]"></a>kdrv_write_desc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kdrv_hash.o(i.kdrv_write_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = kdrv_write_desc &rArr; kdrv_write_desc_always
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_write_desc_always
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdrv_hash_internal
</UL>

<P><STRONG><a name="[2ae]"></a>abs_float</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fuzzy_composition.o(i.abs_float))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rebuild
</UL>

<P><STRONG><a name="[141]"></a>rebuild</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, fuzzy_composition.o(i.rebuild))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rebuild
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_float
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_composition_build
</UL>

<P><STRONG><a name="[fc]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f4]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[108]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[107]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8e]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[8d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
